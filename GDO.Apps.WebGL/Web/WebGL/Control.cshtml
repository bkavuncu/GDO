@using System.IO
@using System.Web.Helpers
@using GDO.Core
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Bootstrap Core CSS -->
    <link href="../../Bootstrap/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- MetisMenu CSS -->
    <link href="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.css" rel="stylesheet">
    <!-- Timeline CSS -->
    <link href="../../Bootstrap/dist/css/timeline.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="../../Bootstrap/dist/css/sb-admin-2.css" rel="stylesheet">
    <!-- Morris Charts CSS -->
    <link href="../../Bootstrap/bower_components/morrisjs/morris.css" rel="stylesheet">
    <!-- Custom Fonts -->
    <link href="../../Bootstrap/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <style>
        body {
            color: #FFF;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .btn-file {
            position: relative;
            overflow: hidden;
        }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            cursor: inherit;
            display: block;
        }

        input[readonly] {
            background-color: #555 !important;
            cursor: text !important;
        }

        .file_upload input.upload {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }

        .input_field_div {
            margin: 0px;
            padding: 0px;
        }

        .input_field {
            width: 100%;
            height: 40px;
            border: 1px solid #333;
            background: #333;
            color: #FFF;
            padding: 0px;
            display: inline-block;
            position: relative;
            text-align: center;
        }
    </style>
</head>
<body unselectable="on" class="unselectable">
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="../../Scripts/jquery.csv-0.71.min.js"></script>
    <script src="../../Bootstrap/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="../../Bootstrap/dist/js/sb-admin-2.js"></script>
    <script src="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.min.js"></script>
    <script src="../../Scripts/three.min.js"></script>
    <script src="../../Scripts/stats.min.js"></script>
    <script>
        $(function () {
            var gdo = parent.gdo;
            gdo.net.app["WebGL"].initControl();

            var container, stats;

            var camera, scene, renderer;

            var mesh, group1, group2, group3, light;

            var mouseX = 0, mouseY = 0;

            var windowHalfX = window.innerWidth / 2;
            var windowHalfY = window.innerHeight / 2;

            init();
            animate();

            function init() {

                container = document.getElementById('wrapper');

                camera = new THREE.PerspectiveCamera(20, window.innerWidth / window.innerHeight, 1, 10000);
                camera.position.z = 1800;

                scene = new THREE.Scene();

                light = new THREE.DirectionalLight(0xffffff);
                light.position.set(0, 0, 1);
                scene.add(light);

                // shadow

                var canvas = document.createElement('canvas');
                canvas.width = 128;
                canvas.height = 128;

                var context = canvas.getContext('2d');
                var gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
                gradient.addColorStop(0.1, 'rgba(210,210,210,1)');
                gradient.addColorStop(1, 'rgba(255,255,255,1)');

                context.fillStyle = gradient;
                context.fillRect(0, 0, canvas.width, canvas.height);

                var shadowTexture = new THREE.Texture(canvas);
                shadowTexture.needsUpdate = true;

                var shadowMaterial = new THREE.MeshBasicMaterial({ map: shadowTexture });
                var shadowGeo = new THREE.PlaneBufferGeometry(300, 300, 1, 1);

                mesh = new THREE.Mesh(shadowGeo, shadowMaterial);
                mesh.position.y = -250;
                mesh.rotation.x = -Math.PI / 2;
                scene.add(mesh);

                mesh = new THREE.Mesh(shadowGeo, shadowMaterial);
                mesh.position.y = -250;
                mesh.position.x = -400;
                mesh.rotation.x = -Math.PI / 2;
                scene.add(mesh);

                mesh = new THREE.Mesh(shadowGeo, shadowMaterial);
                mesh.position.y = -250;
                mesh.position.x = 400;
                mesh.rotation.x = -Math.PI / 2;
                scene.add(mesh);

                var faceIndices = ['a', 'b', 'c'];

                var color, f, f2, f3, p, vertexIndex,

                    radius = 200,

                    geometry = new THREE.IcosahedronGeometry(radius, 1),
                    geometry2 = new THREE.IcosahedronGeometry(radius, 1),
                    geometry3 = new THREE.IcosahedronGeometry(radius, 1);

                for (var i = 0; i < geometry.faces.length; i++) {

                    f = geometry.faces[i];
                    f2 = geometry2.faces[i];
                    f3 = geometry3.faces[i];

                    for (var j = 0; j < 3; j++) {

                        vertexIndex = f[faceIndices[j]];

                        p = geometry.vertices[vertexIndex];

                        color = new THREE.Color(0xffffff);
                        color.setHSL((p.y / radius + 1) / 2, 1.0, 0.5);

                        f.vertexColors[j] = color;

                        color = new THREE.Color(0xffffff);
                        color.setHSL(0.0, (p.y / radius + 1) / 2, 0.5);

                        f2.vertexColors[j] = color;

                        color = new THREE.Color(0xffffff);
                        color.setHSL(0.125 * vertexIndex / geometry.vertices.length, 1.0, 0.5);

                        f3.vertexColors[j] = color;

                    }

                }


                var materials = [

                    new THREE.MeshLambertMaterial({ color: 0xffffff, shading: THREE.FlatShading, vertexColors: THREE.VertexColors }),
                    new THREE.MeshBasicMaterial({ color: 0x000000, shading: THREE.FlatShading, wireframe: true, transparent: true })

                ];

                group1 = THREE.SceneUtils.createMultiMaterialObject(geometry, materials);
                group1.position.x = -400;
                group1.rotation.x = -1.87;
                scene.add(group1);

                group2 = THREE.SceneUtils.createMultiMaterialObject(geometry2, materials);
                group2.position.x = 400;
                group2.rotation.x = 0;
                scene.add(group2);

                group3 = THREE.SceneUtils.createMultiMaterialObject(geometry3, materials);
                group3.position.x = 0;
                group3.rotation.x = 0;
                scene.add(group3);

                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setClearColor(0xffffff);
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight);
                container.appendChild(renderer.domElement);

                stats = new Stats();
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.top = '0px';
                container.appendChild(stats.domElement);

                document.addEventListener('mousemove', onDocumentMouseMove, false);

                //

                window.addEventListener('resize', onWindowResize, false);

            }

            function onWindowResize() {

                windowHalfX = window.innerWidth / 2;
                windowHalfY = window.innerHeight / 2;

                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize(window.innerWidth, window.innerHeight);

            }

            function onDocumentMouseMove(event) {

                mouseX = (event.clientX - windowHalfX);
                mouseY = (event.clientY - windowHalfY);

                gdo.net.app["WebGL"].server.setMousePosition(gdo.controlId, mouseX, mouseY);
            }

            //

            function animate() {

                requestAnimationFrame(animate);

                render();
                stats.update();

            }

            function render() {

                camera.position.x += (mouseX - camera.position.x) * 0.05;
                camera.position.y += (-mouseY - camera.position.y) * 0.05;

                camera.lookAt(scene.position);

                renderer.render(scene, camera);

            }
        });
    </script>
    <div class="wrapper" id="wrapper" style="width:97%">
    </div>
</body>
</html>