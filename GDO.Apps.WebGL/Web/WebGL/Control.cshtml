@using System.IO
@using System.Web.Helpers
@using GDO.Core
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Bootstrap Core CSS -->
    <link href="../../Bootstrap/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- MetisMenu CSS -->
    <link href="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.css" rel="stylesheet">
    <!-- Timeline CSS -->
    <link href="../../Bootstrap/dist/css/timeline.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="../../Bootstrap/dist/css/sb-admin-2.css" rel="stylesheet">
    <!-- Morris Charts CSS -->
    <link href="../../Bootstrap/bower_components/morrisjs/morris.css" rel="stylesheet">
    <!-- Custom Fonts -->
    <link href="../../Bootstrap/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <style>
        body {
            color: #FFF;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .btn-file {
            position: relative;
            overflow: hidden;
        }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            cursor: inherit;
            display: block;
        }

        input[readonly] {
            background-color: #555 !important;
            cursor: text !important;
        }

        .file_upload input.upload {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }

        .input_field_div {
            margin: 0px;
            padding: 0px;
        }

        .input_field {
            width: 100%;
            height: 40px;
            border: 1px solid #333;
            background: #333;
            color: #FFF;
            padding: 0px;
            display: inline-block;
            position: relative;
            text-align: center;
        }
    </style>
</head>
<body unselectable="on" class="unselectable">
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="../../Scripts/jquery.csv-0.71.min.js"></script>
    <script src="../../Bootstrap/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="../../Bootstrap/dist/js/sb-admin-2.js"></script>
    <script src="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.min.js"></script>

    <script src="../../Scripts/three.min.js"></script>
    <script src="../../Scripts/stats.min.js"></script>

    <script type="text/javascript" src="../../Scripts/WebGL/TestWorld.js"></script>

    <script>
        $(function () {
            var gdo = parent.gdo;
            gdo.net.app["WebGL"].initControl();

            $(document).ready(function () {

                //
                // Set up renderer on window

                var container = document.getElementById('wrapper');

                var renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setClearColor(0xffffff);
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight);
                container.appendChild(renderer.domElement);

                var windowHalfX = window.innerWidth / 2;
                var windowHalfY = window.innerHeight / 2;

                function onWindowResize() {

                    windowHalfX = window.innerWidth / 2;
                    windowHalfY = window.innerHeight / 2;

                    var effectiveWidth = window.innerHeight * (16 / 9);
                    var effectiveHeight = window.innerWidth * (9 / 16);

                    if (effectiveWidth > window.innerWidth) {
                        renderer.setSize(window.innerWidth, effectiveHeight);
                    } else {
                        renderer.setSize(effectiveWidth, window.innerHeight);
                    }
                }

                onWindowResize();
                window.addEventListener('resize', onWindowResize, false);

                //
                // Track mouse position

                var mouseX = 0;
                var mouseY = 0;

                function onDocumentMouseMove(event) {
                    mouseX = (event.clientX - windowHalfX);
                    mouseY = (event.clientY - windowHalfY);
                }

                document.addEventListener('mousemove', onDocumentMouseMove, false);

                //
                // Create camera and periodically send its position to clients

                var camera = new THREE.PerspectiveCamera(20, 16 / 9, 3, 10000);
                camera.position.z = 1800;

                function sendCameraPositionToClients() {
                    gdo.net.app["WebGL"].server.setCameraPosition(gdo.controlId,
                        {
                            Position: [camera.position.x,
                                        camera.position.y,
                                        camera.position.z],
                            Quaternion: [camera.quaternion.x,
                                camera.quaternion.y,
                                camera.quaternion.z,
                                camera.quaternion.w]
                        });
                }

                setInterval(sendCameraPositionToClients, 1000 / 60);

                //
                // Create 3d world

                var world = new TestWorld(renderer, camera);
                world.initScene();

                //
                // Periodically move camera towards mouse position

                function moveCamera() {
                    camera.position.x += (mouseX - camera.position.x) * 0.05;
                    camera.position.y += (-mouseY - camera.position.y) * 0.05;

                    camera.lookAt(world.scene.position);
                }

                setInterval(moveCamera, 1000 / 60);

                //
                // Start rendering

                world.startRendering();

            });
        });
    </script>
    <div class="wrapper" id="wrapper" style="width:97%">
    </div>
</body>
</html>