@{
    Layout = null;
}

<!DOCTYPE html>

<html style="overflow: hidden">
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>

</head>
<body unselectable="on" class="unselectable" style="margin: 0px;">
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>

    <script type="text/javascript" src="../../Scripts/three.min.js"></script>

    <script type="text/javascript" src="../../Scripts/WebGL/TestWorld.js"></script>
    <script type="text/javascript" src="../../Scripts/WebGL/ViewportTestWorld.js"></script>
    <script type="text/javascript" src="../../Scripts/WebGL/UFOWorld.js"></script>

    <script type="x-shader/x-vertex" id="vertexShader">
        varying vec3 vWorldPosition;

        void main() {

        vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
        vWorldPosition = worldPosition.xyz;

        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

        }

    </script>
    <script type="x-shader/x-fragment" id="fragmentShader">
        uniform vec3 topColor;
        uniform vec3 bottomColor;
        uniform float offset;
        uniform float exponent;

        varying vec3 vWorldPosition;

        void main() {

        float h = normalize( vWorldPosition + offset ).y;
        h = max(0.0, h);
        gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( h, exponent ), 0.0 ) ), 1.0 );

        }

    </script>

    <script>
        $(function () {
            var gdo = parent.gdo;
            $(document).ready(function () {

                var instanceId = gdo.net.node[gdo.clientId].appInstanceId;

                //
                // Create renderer and attach to window

                var container = document.getElementById('wrapper');

                var renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setClearColor(0xffffff);
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight);
                container.appendChild(renderer.domElement);

                function onWindowResize() {
                    var effectiveWidth = window.innerHeight * (16 / 9);
                    var effectiveHeight = window.innerWidth * (9 / 16);

                    if (effectiveWidth > window.innerWidth) {
                        renderer.setSize(window.innerWidth, effectiveHeight);
                    } else {
                        renderer.setSize(effectiveWidth, window.innerHeight);
                    }
                }

                onWindowResize();
                window.addEventListener('resize', onWindowResize, false);

                //
                // Setup camera and camera parent

                var physicalTotalHeight = 2530;  // in mm
                var physicalScreenHeight = physicalTotalHeight / 4;
                var physicalRadius = 3000;

                var numberScreensHigh = gdo.net.section[gdo.net.node[gdo.clientId].sectionId].height / 1080; 

                var virticalFov = Math.atan(((numberScreensHigh * physicalScreenHeight) / 2) / 3000) * 2;
                virticalFov = virticalFov * (180 / Math.PI);

                var camera = new THREE.PerspectiveCamera(virticalFov, 16 / 9, 3, 10000);

                var world = new ViewportTestWorld(renderer, camera);
                world.initScene();

                var w = 1920;
                var h = 1080;
                var fullWidth = w;
                var fullHeight = gdo.net.section[gdo.net.node[gdo.clientId].sectionId].height;

                var yOffset = gdo.net.node[gdo.clientId].height * gdo.net.node[gdo.clientId].sectionRow;
                gdo.consoleOut('.WebGL', 1, 'Y Offset- ' + yOffset);

                camera.setViewOffset(fullWidth, fullHeight, 0, yOffset, w, h);

                var numNodesWide = (gdo.net.section[gdo.net.node[gdo.clientId].sectionId].width / 1920) - 1;
                var nodeOffset = gdo.net.node[gdo.clientId].sectionCol - (numNodesWide / 2);
                gdo.consoleOut('.WebGL', 1, 'Node offset - ' + (numNodesWide % 2));
                camera.rotateY(nodeOffset * (-0.374));

                var cameraParent = new THREE.Object3D();
                cameraParent.add(camera);
                world.scene.add(cameraParent);

                gdo.net.app["WebGL"].initClient(cameraParent);

                world.startRendering();

                // PeerJS fiddling

                /*

                // Sends clientId to all connected neighbour nodes once a second
                var connectedNodes = [];

                setInterval(function() {
                    for (var index in gdo.net.neighbour) {
                        var neighbourId = gdo.net.neighbour[index];

                        if (neighbourId == -1) continue;

                        if (gdo.net.node[neighbourId].connectedToPeer) {
                            var conn = gdo.net.peer.connections[gdo.net.node[neighbourId].peerId][0];

                            if (connectedNodes.indexOf(neighbourId) == -1) {
                                // Receive messages
                                conn.on('data', function (data) {
                                    gdo.consoleOut('.WebGL', 2, "Received data: " + data.toString());
                                });
                                connectedNodes.push(neighbourId); 
                            } else {
                                conn.send(JSON.stringify({ type: 'id', value: gdo.clientId }));
                            }
                        }
                    }
                }, 1000);

                */
            });
        });
    </script>

    <div id="wrapper" style="background-color:#000;width:100vw;height:100vh;text-align:center; vertical-align: middle;" align="center">
    </div>

</body>
</html>
