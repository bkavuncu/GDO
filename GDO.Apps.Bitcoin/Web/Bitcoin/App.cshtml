@{
    Layout = null;
}

<!DOCTYPE html>

<html style="overflow: hidden">
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        body {
            background: #000;
            color: #FFF;
            font-family: helvetica;
            font-size: 70%;
        }

        #graphcontainer {
            max-width: 3840px;
            height: 3840px;
            margin: auto;
        }

        #textarea {
            color: #ffffff;
            font-family: verdana, sans-serif;
        }
        #textarea2{
			color: #ffffff;
			font-family: verdana, sans-serif;
		}
		#peerID {
			color: #ffffff;
			font-family: verdana, sans-serif;
		}

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

    </style>
</head>
<body unselectable="on" class="unselectable">
    <div id="textarea2"></div>
    <div id="graphcontainer"></div>
    <div id="textarea"></div>


<!--globe-->
<script src="../../Scripts/jquery-2.1.4.min.js"></script>
<script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="../../Scripts/Bitcoin/globe/third-party/three.min.js"></script>
<script src="../../Scripts/Bitcoin/globe/globe.js"></script>

    <!--mempool-->
<script src="../../Scripts/Bitcoin/sigma.js/sigma.min.js"></script>
<script src="../../Scripts/Bitcoin/sigma.js/plugins/sigma.layout.forceAtlas2.min.js"></script>
<script src="../../Scripts/Bitcoin/sigma.js/plugins/sigma.plugins.filter.min.js"></script>
<script src="../../Scripts/Bitcoin/peerjs/peer.js"></script>
<script src="../../Scripts/Bitcoin/bitGraph.js"></script>

<script>
    
    $(function () {

        $(document).ready(function() {
            var gdo = parent.gdo;
            gdo.net.app["Bitcoin"].initClient();

            var instanceId = gdo.net.node[gdo.clientId].appInstanceId;
            var configName = gdo.net.instance[instanceId].configName;
            var container = document.getElementById('graphcontainer');
            var textarea = document.getElementById('textarea');
            var textarea2 = document.getElementById('textarea2');


            switch (configName) {
                case "Globe":

                    function populateTextArea_globe() {
                        textarea.innerHTML =
                            "NumNodes: <div id='numNodes' style='display:inline-block;'></div><br>" +
                            "BlockHeight: <div id='blkHeight' style='display:inline-block;'></div><br>" +
                            "At Time: <div id='time' style='display:inline-block;'></div><br>" +
                            "NumTxs: <div id='numTxs' style='display:inline-block;'></div><br>";
                    }
        
                    var globe = new DAT.Globe(container);
                    var allIPv4Nodes = {};
                    var numTxs = 0;

                    function getNodeLocns(nodeArr) {

                        var nodeLocns = [];
                        for (var k in nodeArr) {
                            var node = nodeArr[k];

                            // create global object for ipv4 addresses only
                            if (k.substring(0, 1) != '[') {
                                var addr = k.substring(0, k.indexOf(':'));
                                var newnode = {
                                    "proto_ver": node[0],
                                    "user_agent": node[1],
                                    "cnxn_since": node[2],
                                    "block_height": node[4],
                                    "hostname": node[5],
                                    "city": node[6],
                                    "country": node[7],
                                    "lat": node[8],
                                    "long": node[9],
                                    "timezone": node[10],
                                    "asn": node[11],
                                    "org": node[12],
                                    "mag": 0
                                };
                                allIPv4Nodes[addr] = newnode;
                            }

                            //create array to display all nodes
                            nodeLocns.push(node[8]);
                            nodeLocns.push(node[9]);
                            nodeLocns.push(0.00);
                        }
                        console.log(allIPv4Nodes);
                        return nodeLocns;
                    }

                    function initNodes() {

                        var xmlhttp = new XMLHttpRequest();
                        var url = "https://bitnodes.21.co/api/v1/snapshots/latest"; 

                        xmlhttp.onreadystatechange = function () {
                            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {

                                var resObj = JSON.parse(xmlhttp.responseText);
                                //console.log(resObj);
                                var allNodeLocns = getNodeLocns(resObj.nodes);
                                document.getElementById('numNodes').innerHTML = resObj.total_nodes;
                                document.getElementById('blkHeight').innerHTML = resObj.latest_height;
                                var timestamp = new Date(resObj.timestamp * 1000);
                                document.getElementById('time').innerHTML = timestamp.getHours() + ':' + timestamp.getMinutes() + ':' +
                                    timestamp.getSeconds();

                                globe.addData(allNodeLocns, { format: 'magnitude', name: 'allNodeLocns', animated: false });
                                globe.createPoints();
                                globe.animate();
                            }
                        };

                        xmlhttp.open("GET", url, true);
                        xmlhttp.send();
                        console.log('Retrieved current backbone nodes');
                    }

                    function transmit(payload) {
                        bcWebsocket.send(JSON.stringify(payload));
                    }

                    function onOpen(openEvent) {
                        console.log("connecting");
                        //subscribe to realtime transaction notifications
                        transmit({ "op": "unconfirmed_sub" });
                        console.log("subscribed to unconfirmed transactions");
                        //subscribe to realtime block notifications
                        transmit({ "op": "blocks_sub" });
                        console.log("subscribed to new block notifications");
                    }

                    function onMessage(msgEvent) {

                        var msg = JSON.parse(msgEvent.data);

                        if (msg.op == 'utx') {
                            var pointData = [];
                            var tx_addr = msg.x.relayed_by;
                            console.log('new tx relayed by: ' + tx_addr);
                            if (tx_addr != undefined && tx_addr != '127.0.0.1' &&
                                tx_addr != '0.0.0.0' && tx_addr.substring(0, 1) != '[') {

                                console.log('--in ' + allIPv4Nodes[msg.x.relayed_by].city + ',' + allIPv4Nodes[msg.x.relayed_by].country);

                                pointData.push(allIPv4Nodes[msg.x.relayed_by].lat);
                                pointData.push(allIPv4Nodes[msg.x.relayed_by].long);
                                pointData.push((++allIPv4Nodes[msg.x.relayed_by].mag) / 10);

                                globe.addData(pointData, { format: 'magnitude', name: 'allNodeLocns', animated: false });
                                globe.createPoints();
                                //globe.animate();

                                document.getElementById('numTxs').innerHTML = ++numTxs;
                            }
                        }
                    }

                    function addTxs() {
                        var ws = "wss://ws.blockchain.info/inv";
                        bcWebsocket = new WebSocket(ws);
                        bcWebsocket.onopen = function (openEvent) { onOpen(openEvent) };
                        bcWebsocket.onmessage = function (msgEvent) { onMessage(msgEvent) };
                    }

                    var initGlobe = function () {
                        populateTextArea_globe();
                        initNodes();
                        addTxs();
                    }

                    initGlobe();
                    break;


                case "Mempool":

                    function populateTextAreas_mempool() {
                        textarea2.innerHTML =
                            '<div id="peerID" style="display:inline-block;">Not connected to controller</div><br>' +
                            'Time since observation start: <div id="obsTimer" style="display:inline-block;"></div><br>' +
                            'Time since last block<div id="lastBlk" style="display:inline-block;"></div>' +
                            ': <div id="blkTimer" style="display:inline-block;">pending</div><br>' +
                            '<div id="blkAlert" >&nbsp</div>';

                        textarea.innerHTML =
                        '<table>'+
                            '<tr>'+
                                '<td width="200">TxRate: <div id="statTxRate" style="display:inline-block;"></div>tps</td>'+
                                '<td width="300"><B>Value</B></td>'+
                                '<td width="300"><B>Fees</B></td>'+
                                '<td width="300"><B>Size</B></td>'+
                                '<td width="300"><B>Fee Density</B></td>'+
                            '</tr>'+
                            '<tr>'+
                                '<td>NumTx: <div id="statNumTx" style="display:inline-block;"></div></td>'+
                                '<td>Max: <div id="txMaxVal" style="display:inline-block;"></div></td>'+
                                '<td>Max: <div id="txMaxFee" style="display:inline-block;"></div></td>'+
                                '<td>Max: <div id="txMaxSize" style="display:inline-block;"></div>bytes</td>'+
                                '<td><div id="txMaxFeeDens" style="display:inline-block;"></div></td>'+
                            '</tr>'+
                            '<tr>'+
                                '<td>NumIn: <div id="statNumIn" style="display:inline-block;"></div></td>'+
                                '<td>Total: <div id="txTotalVal" style="display:inline-block;"></div></td>'+
                                '<td>Total: <div id="txTotalFee" style="display:inline-block;"></div></td>'+
                                '<td>Total: <div id="txTotalSize" style="display:inline-block;"></div>bytes</td>'+
                                '<td><div id="txTotalFeeDens" style="display:inline-block;"></div></td>'+
                            '</tr>'+
                            '<tr>'+
                                '<td>NumOut: <div id="statNumOut" style="display:inline-block;"></div></td>'+
                                '<td>Avg: <div id="txAvgVal" style="display:inline-block;"></div></td>'+
                                '<td>Avg: <div id="txAvgFee" style="display:inline-block;"></div></td>'+
                                '<td>Avg: <div id="txAvgSize" style="display:inline-block;"></div>bytes</td>'+
                                '<td>Avg: <div id="txAvgFeeDens" style="display:inline-block;"></div></td>'+
                            '</tr>'+
                            '<tr>'+
                                '<td>NumNodes: <div id="statNumNodes" style="display:inline-block;"></div></td>'+
                                '<td></td>'+
                                '<td></td>'+
                                '<td></td>'+
                                '<td></td>'+
                            '</tr>'+
                        '</table>';
                    }

                    function timeObs(time) {
                        var diff = Date.now() - time;
                        document.getElementById('obsTimer').innerHTML = Math.floor((diff % 3600000) / 60000) + 'm' +
                                Math.floor((diff % 60000) / 1000) + 's';
                    }

                    function startTimers() {
                        var obsStart = Date.now();
                        var obsTimer = setInterval(timeObs, 1000, [obsStart]);
                        //setInterval(function(){processMsg({op:'block',x:{height:Math.random()}})},10000);
                    }

                    function timeBlock(time) {
                        var diff = Date.now() - time;
                        document.getElementById('blkTimer').innerHTML = Math.floor((diff % 3600000) / 60000) + 'm' +
                                Math.floor((diff % 60000) / 1000) + 's';
                    }

                    function getFX() {
                        var xmlhttp = new XMLHttpRequest();
                        xmlhttp.onreadystatechange = function () {
                            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                                var resObj = JSON.parse(xmlhttp.responseText);
                                currUSDBTC = resObj.USD.last;
                                console.log('USD FX Rate=' + currUSDBTC);
                            }
                            else {
                            }
                        };

                        xmlhttp.open("GET", 'https://api.bitcoinaverage.com/ticker/global/all', true);
                        xmlhttp.send();
                    }

                    function onMessageMempool(msgEvent) {

                        var msg = JSON.parse(msgEvent.data);

                        if (paused) {
                            msgBuf.push(msg);
                        }

                        else {

                            processMsg(msg);
                            applyFilters();
                            renderGraph();

                            $("txMaxVal").innerHTML = (txMaxVal / 100000000).toLocaleString() + 'B / $' +
                                                            (currUSDBTC * txMaxVal / 100000000).toLocaleString();
                            $("txTotalVal").innerHTML = (txTotalVal / 100000000).toLocaleString() + 'B / $' +
                                                            (currUSDBTC * txTotalVal / 100000000).toLocaleString();
                            $("txAvgVal").innerHTML = ((txTotalVal / numTx) * 1000 / 100000000).toLocaleString() + 'mB / $' +
                                                            ((currUSDBTC * txTotalVal / numTx) / 100000000).toLocaleString();

                            $("#txMaxFee").innerHTML = (txMaxFee * 1000 / 100000000).toLocaleString() + 'mB / $' +
                                                            (currUSDBTC * txMaxFee / 100000000).toLocaleString();
                            document.getElementById('txTotalFee').innerHTML = (txTotalFee / 100000000).toLocaleString() + 'B / $' +
                                                            (currUSDBTC * txTotalFee / 100000000).toLocaleString();
                            document.getElementById('txAvgFee').innerHTML = ((txTotalFee / numTx) * 1000 / 100000000).toLocaleString() + 'mB / $' +
                                                            ((currUSDBTC * txTotalFee / numTx) / 100000000).toLocaleString();

                            document.getElementById('txMaxSize').innerHTML = (txMaxSize).toLocaleString();
                            document.getElementById('txTotalSize').innerHTML = (txTotalSize).toLocaleString();
                            document.getElementById('txAvgSize').innerHTML = (txTotalSize / numTx).toLocaleString();

                            document.getElementById('txMaxFeeDens').innerHTML = "";
                            document.getElementById('txTotalFeeDens').innerHTML = "";
                            document.getElementById('txAvgFeeDens').innerHTML = (txTotalFee / txTotalSize).toLocaleString() + 'sat/byte / $' +
                                    (currUSDBTC * 1024 * txTotalFee / (txTotalSize * 100000000)).toLocaleString() + '/kB';

                            //update tx rate every 10 transactions
                            if (msg.op == 'utx') {
                                if ((numTx - lastRateTx) % 10 == 0) {
                                    txRate = 10 / ((Date.now() - timeOfLastTx) / 1000);
                                    document.getElementById('statTxRate').innerHTML = txRate.toLocaleString();
                                    timeOfLastTx = Date.now();
                                    lastRateTx = numTx;
                                }
                            }
                        }
                    }

                    function runWebSocket() {
                        var ws = "wss://ws.blockchain.info/inv";
                        bcWebsocket = new WebSocket(ws);
                        bcWebsocket.onopen = function (openEvent) { onOpen(openEvent) };
                        bcWebsocket.onmessage = function (msgEvent) { onMessageMempool(msgEvent) };
                    }

                    function initMempool() {

                        populateTextAreas_mempool();
                        startTimers();
                        getFX();
                        // Handle events
                        //peerConnect(-1);
                        bindEvents(-1);

                        // Get Transactions
                        runWebSocket();
                    }

                    initMempool();
                    break;



                case "Block":
                    // $("#graphcontainer").text("THIS IS BLOCK!");

                    function populateTextAreas_block() {
                        textarea2.innerHTML =
                            '<div id="peerID" style="display:inline-block;">Not connected to controller</div>';

                        textarea.innerHTML =
                            ' CreatedAt: <div id="createdAt" style="display:inline-block;"></div><br>' +
                        '<table>' +
                            '<tr>' +
                                '<td width="200">Block: <div id="blkNum" style="display:inline-block;"></div></td>' +
                                '<td width="300"><B>Value</B></td>' +
                                '<td width="300"><B>Fees</B></td>' +
                                '<td width="300"><B>Size</B></td>' +
                                '<td width="300"><B>Fee Density</B></td>' +
                            '</tr>' +
                            '<tr>' +
                                '<td>NumTx: <div id="statNumTx" style="display:inline-block;"></div></td>' +
                                '<td>Max: <div id="txMaxVal" style="display:inline-block;"></div></td>' +
                                '<td>Max: <div id="txMaxFee" style="display:inline-block;"></div></td>' +
                                '<td>Max: <div id="txMaxSize" style="display:inline-block;"></div>bytes</td>' +
                                '<td><div id="txMaxFeeDens" style="display:inline-block;"></div></td>' +
                            '</tr>' +
                            '<tr>' +
                                '<td>NumIn: <div id="statNumIn" style="display:inline-block;"></div></td>' +
                                '<td>Total: <div id="txTotalVal" style="display:inline-block;"></div></td>' +
                                '<td>Total: <div id="txTotalFee" style="display:inline-block;"></div></td>' +
                                '<td>Total: <div id="txTotalSize" style="display:inline-block;"></div>bytes</td>' +
                                '<td><div id="txTotalFeeDens" style="display:inline-block;"></div></td>' +
                            '</tr>' +
                            '<tr>' +
                                '<td>NumOut: <div id="statNumOut" style="display:inline-block;"></div></td>' +
                                '<td>Avg: <div id="txAvgVal" style="display:inline-block;"></div></td>' +
                                '<td>Avg: <div id="txAvgFee" style="display:inline-block;"></div></td>' +
                                '<td>Avg: <div id="txAvgSize" style="display:inline-block;"></div>bytes</td>' +
                                '<td>Avg: <div id="txAvgFeeDens" style="display:inline-block;"></div></td>' +
                            '</tr>' +
                            '<tr>' +
                                '<td>NumNodes: <div id="statNumNodes" style="display:inline-block;"></div></td>' +
                                '<td></td>' +
                                '<td></td>' +
                                '<td></td>' +
                                '<td></td>' +
                            '</tr>' +
                        '</table>';
                    }

                    //simple url querystring regex parser from
                    //stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
                    //avoiding need for jQuery
                    function getParameterByName(name) {
                        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                                results = regex.exec(location.search);
                        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
                    }

                    function handleTxs(txArray) {

                        //convert from biteasy json to blockchain.info json format
                        for (var i = 0; i < txArray.length; i++) {
                            var msg = {};
                            msg["op"] = "utx";
                            msg["x"] = {};
                            msg.x["size"] = txArray[i].size;

                            //inputs
                            msg.x["inputs"] = [];
                            for (var j = 0; j < txArray[i].inputs.length; j++) {
                                var newInput = {};
                                if (!txArray[i].inputs[j].is_coinbase) {
                                    newInput["prev_out"] = {};
                                    newInput.prev_out["tx_index"] = txArray[i].inputs[j].outpoint_hash;
                                    newInput.prev_out["addr"] = txArray[i].inputs[j].from_address;
                                    newInput.prev_out["value"] = txArray[i].inputs[j].outpoint_value;
                                    newInput.prev_out["n"] = txArray[i].inputs[j].outpoint_index;

                                    newInput["script"] = txArray[i].inputs[j].script_sig;

                                    msg.x.inputs.push(newInput);
                                }
                            }

                            //misc
                            msg.x["time"] = Date.parse(txArray[i].created_at) / 1000.0;
                            msg.x["tx_index"] = txArray[i].hash;
                            msg.x["vin_sz"] = txArray[i].inputs.length;
                            msg.x["hash"] = txArray[i].hash;
                            msg.x["vout_sz"] = txArray[i].outputs.length;
                            msg.x["relayed_by"] = '127.0.0.1';
                            msg.x["is_coinbase"] = txArray[i].is_coinbase;

                            //outputs
                            msg.x["out"] = [];
                            for (j = 0; j < txArray[i].outputs.length; j++) {
                                var newOutput = {};
                                newOutput["tx_index"] = txArray[i].hash;
                                newOutput["addr"] = txArray[i].outputs[j].to_address;
                                newOutput["value"] = txArray[i].outputs[j].value;
                                newOutput["n"] = txArray[i].outputs[j].transaction_index;

                                msg.x.out.push(newOutput);
                            }

                            if (paused) {
                                msgBuf.push(msg);
                                return;
                            }

                            else {
                                processMsg(msg);
                            }
                        }

                        applyFilters();
                        renderGraph();

                        //Update DOM elements
                        document.getElementById('txMaxVal').innerHTML = (txMaxVal / 100000000).toLocaleString() + 'B';
                        document.getElementById('txTotalVal').innerHTML = (txTotalVal / 100000000).toLocaleString() + 'B';
                        document.getElementById('txAvgVal').innerHTML = ((txTotalVal / numTx) * 1000 / 100000000).toLocaleString() + 'mB';

                        document.getElementById('txMaxFee').innerHTML = (txMaxFee * 1000 / 100000000).toLocaleString() + 'mB';
                        document.getElementById('txTotalFee').innerHTML = (txTotalFee / 100000000).toLocaleString() + 'B';
                        document.getElementById('txAvgFee').innerHTML = ((txTotalFee / numTx) * 1000 / 100000000).toLocaleString() + 'mB'

                        document.getElementById('txMaxSize').innerHTML = (txMaxSize).toLocaleString();
                        document.getElementById('txTotalSize').innerHTML = (txTotalSize).toLocaleString();
                        document.getElementById('txAvgSize').innerHTML = (txTotalSize / numTx).toLocaleString();

                        document.getElementById('txMaxFeeDens').innerHTML = "";
                        document.getElementById('txTotalFeeDens').innerHTML = "";
                        document.getElementById('txAvgFeeDens').innerHTML = (txTotalFee / txTotalSize).toLocaleString() + 'sat/byte';
                    }

                    //recursively call api until no more pages of txs left
                    function getPagedTxs(uri, page, txs) {
                        var xmlhttp = new XMLHttpRequest();

                        xmlhttp.onreadystatechange = function () {
                            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                                console.log('Retrieved block details, page:' + page);
                                var resObj = JSON.parse(xmlhttp.responseText);

                                for (var i = 0; i < resObj.data.transactions.length; i++)
                                    txs.push(resObj.data.transactions[i]);

                                console.log('next_page is:' + resObj.data.pagination.next_page);
                                if (resObj.data.pagination.next_page)
                                    getPagedTxs(uri, resObj.data.pagination.next_page, txs);
                                else
                                    handleTxs(txs);
                            }
                        };

                        xmlhttp.open("GET", uri + page, true);

                        //limit requests to 4 per second to avoid biteasy limiter
                        setTimeout(function () {
                            xmlhttp.send();
                        }, 250);
                    }

                    //get transactions for given block hash in maximum 200tx chunks
                    function initBlock() {

                        var blockhash;
                        var queryparam = getParameterByName('block');

                        //peerConnect(queryparam)
                        bindEvents(queryparam);

                        //if we're given a height rather than hash
                        if (queryparam.length <= 6) {

                            var xmlhttp = new XMLHttpRequest();
                            xmlhttp.onreadystatechange = function () {
                                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {

                                    console.log('Retrieved block details successfully');
                                    var resObj = JSON.parse(xmlhttp.responseText);

                                    if (resObj.data.blocks[0]) {
                                        blockhash = resObj.data.blocks[0].hash;
                                        document.getElementById('blkNum').innerHTML = queryparam;
                                        document.getElementById('createdAt').innerHTML = resObj.data.blocks[0].solved_at;
                                    }
                                    else {
                                        console.log('but block info was empty');
                                        document.getElementById('blkNum').innerHTML = 'Ohoh-Fresh block.  Transaction data not yet available';
                                        return;
                                    }

                                    var uri = "http://cors.io/?u=https://api.biteasy.com/v2/btc/mainnet/transactions?block_hash=" + blockhash + "&per_page=200&page=";
                                    var txArray = [];
                                    getPagedTxs(uri, 1, txArray);
                                }
                            };

                            xmlhttp.open("GET", 'http://cors.io/?u=https://api.biteasy.com/v2/btc/mainnet/blocks?height=' + queryparam + '&type=BEST_CHAIN', true);    //FIX added to prevent error  "No 'Access-Control-Allow-Origin' header is present on the requested resource."
                            xmlhttp.send();
                        }
                        else {
                            blockhash = queryparam;

                            var uri = "http://cors.io/?u=https://api.biteasy.com/v2/btc/mainnet/transactions?block_hash=" + blockhash + "&per_page=200&page=";
                            var txArray = [];

                            getPagedTxs(uri, 1, txArray);
                        }

                    }

                    populateTextAreas_block();
                    initBlock();
                    break;


                default:
                    $("#graphcontainer").text("THIS IS A WRONG CONFIGURATION!");

            }


        });

    });
</script>

</body>

</html>
