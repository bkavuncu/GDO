@using System.IO
@using System.Web.Helpers
@using GDO.Core
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        body {
            background: #222;
            color: #FFF;
            font-family: helvetica;
            font-size: 70%;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .thumb {
            height: 75px;
            border: 1px solid #000;
            margin: 10px 5px 0 0;
        }

        .table_control td {
            text-align:center;
            border: 1px solid #FFF;
            padding: 8px;
            font-size:1.4em;

            /* Unselectable */
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        table.table_control {
            /*border-collapse:collapse;*/
        }

        .green {
            background-color:#006400;
        }

        .green:active {
            background-color:#005400;
        }
        
        .red {
            background-color:#8B0000;
        }

    </style>
</head>
<body>
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script>
        $(function () {
            $(document).ready(function () {
                var gdo = parent.gdo,
                    server = gdo.net.app.DD3.server;

                var instanceId,
                    confId,
                    numClients;

                var test_bench = [];

                var callback = function (message) {
                    confId = message.configurationId;
                    numClients = message.numClient;
                    if (message.state == 1) {
                        test_bench[confId] && test_bench[confId]();
                        $("#wait").css("display", "none");
                        $("#control_" + confId).css("display", "");
                    }
                };

                var order = function (name, args) {
                    return JSON.stringify({ name: name, args: args });
                };

                if (!gdo.net.app["DD3"].initControl) {
                    $("#wait").css("display", "none");
                    $("#error").css("display", "");
                    return;
                }

                instanceId = gdo.net.app["DD3"].initControl(callback);

                test_bench[0] = function () {
                    var rect = false, circles = 0, dcircles = 0, polygon = false;

                    // == Basic Moves ==

                    $('#createRect').click(function () {
                        if (!rect) {
                            server.sendOrder(instanceId, order("createRect", []), false);
                            $(".basic_moves .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            rect = true;
                        }
                    });

                    $('#removeRect').click(function () {
                        if (rect) {
                            server.sendOrder(instanceId, order("removeRect", []), false);
                            $(".basic_moves .green").removeClass("green").addClass("red");
                            $('#createRect').removeClass("red").addClass("green");
                            rect = false;
                        }
                    });

                    $('#translationX').click(function () {
                        rect && server.sendOrder(instanceId, order("startXTranslation", ['X']), false);
                    });

                    $('#translationY').click(function () {
                        rect && server.sendOrder(instanceId, order("startYTranslation", ['Y']), false);
                    });

                    $('#rotation').click(function () {
                        rect && server.sendOrder(instanceId, order("startRotation", ['R']), false);
                    });

                    $('#allMoves').click(function () {
                        if (rect) {
                            server.sendOrder(instanceId, order("startXTranslation", ["X"]), false);
                            server.sendOrder(instanceId, order("startYTranslation", ["Y"]), false);
                            server.sendOrder(instanceId, order("startRotation", ["R"]), false);
                        }
                    });

                    // == Superposition ==

                    $('#createCircles').click(function () {
                        if (!circles) {
                            circles = 100;
                            server.sendOrder(instanceId, order("createCircles", [circles, 1]), false);
                            $(".superposition.non_distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spanc").text(circles)
                        }
                    });

                    $('#createDistributedCircles').click(function () {
                        if (!dcircles) {
                            dcircles = 10;
                            server.sendOrder(instanceId, order("createDistributedCircles", [dcircles, 0.9]), true);
                            $(".superposition.distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spandc").text(dcircles * numClients)
                        }
                    });

                    $('#removeCircles').click(function () {
                        if (!!circles) {
                            server.sendOrder(instanceId, order("removeCircles", []), false);
                            $(".superposition.non_distributed .green").removeClass("green").addClass("red");
                            $('#createCircles').removeClass("red").addClass("green");
                            circles = 0;
                            $("#spanc").text("");
                        }
                    });

                    $('#removeDistributedCircles').click(function () {
                        if (!!dcircles) {
                            server.sendOrder(instanceId, order("removeDistributedCircles", []), true);
                            $(".superposition.distributed .green").removeClass("green").addClass("red");
                            $('#createDistributedCircles').removeClass("red").addClass("green");
                            dcircles = 0;
                            $("#spandc").text("");
                        }
                    });

                    $("#nbAddCircles").click(function (e) { e.stopPropagation(); });

                    $('#addCircles').click(function () {
                        var n = +$("#nbAddCircles").val();
                        circles && (server.sendOrder(instanceId, order("createCircles", [n]), false), $("#spanc").text(circles += n));
                    });

                    $("#nbAddDistributedCircles").click(function (e) { e.stopPropagation(); });

                    $('#addDistributedCircles').click(function () {
                        var n = +$("#nbAddDistributedCircles").val();
                        dcircles && (server.sendOrder(instanceId, order("createDistributedCircles", [n, 0.9]), true), $("#spandc").text((dcircles += n) * numClients));
                    });

                    $('#moveCircles').click(function () {
                        circles && server.sendOrder(instanceId, order("startMoveCircles", []), false);
                    });

                    $('#moveDistributedCircles').click(function () {
                        dcircles && server.sendOrder(instanceId, order("startMoveDistributedCircles", []), true);
                    });

                    // == Group Transition ==

                    $('#createPolygon').click(function () {
                        if (!polygon) {
                            server.sendOrder(instanceId, order("createPolygon", []), false);
                            $(".group .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            polygon = true;
                        }
                    });

                    $('#removePolygon').click(function () {
                        if (polygon) {
                            server.sendOrder(instanceId, order("removePolygon", []), false);
                            $(".group .green").removeClass("green").addClass("red");
                            $('#createPolygon').removeClass("red").addClass("green");
                            polygon = false;
                        }
                    });

                    $('#movePolygon').click(function () {
                        polygon && server.sendOrder(instanceId, order("startMovePolygon", []), false);
                    });

                };

                test_bench[2] = function () {
                    $("#changeValues").click(function () {
                        var n = +$("#timeTr").val();
                        server.sendOrder(instanceId, order("changeValues", [n]), true);
                    });
                };

            });
        });
    </script>

    <div id="wait" style="">
        Please wait while app is initializing...
    </div>

    <div id="error" style="display:none">
        <p style="color: rgb(237, 20, 51);font-size: 2.5em;">
            :(
        </p>
        <p style="color: rgb(237, 20, 51);font-size:2.5em;">
            Something went wrong, please reload the page<br>
            <span style="color:firebrick;font-size:0.7em;font-style:italic"> Error : the function 'initControl' was not initialized</span>
        </p>
    </div>

    <div id="control_0" style="display:none">
        <table class="table_control">
            <tr class="basic_moves">
                <td colspan="3">Basic moves</td>
            </tr>
            <tr class="basic_moves">
                <td rowspan="4" class="green" id="createRect">Create Rectangle</td>
                <td class="red" id="translationX">X Translation</td>
                <td rowspan="4" class="red" id="removeRect">Remove Rectangle</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="translationY">Y Translation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="rotation">Rotation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="allMoves">All</td>
            </tr>
            <tr class="superposition">
                <td colspan="3">Superposition</td>
            </tr>
            <tr class="superposition non_distributed">
                <td rowspan="2" class="green" id="createCircles">Create Circles</td>
                <td class="red" id="moveCircles">Move <span id="spanc"></span> Circles</td>
                <td rowspan="2" class="red" id="removeCircles">Remove Circles</td>
            </tr>
            <tr class="superposition non_distributed">
                <td class="red" id="addCircles">Add Circles <input id="nbAddCircles" type="number" value="100" style="width:50px"/></td>
            </tr>
            <tr class="superposition distributed">
                <td rowspan="2" class="green" id="createDistributedCircles">Create distributed Circles</td>
                <td class="red" id="moveDistributedCircles">Move <span id="spandc"></span> distributed Circles</td>
                <td rowspan="2" class="red" id="removeDistributedCircles">Remove distributed Circles</td>
            </tr>
            <tr class="superposition distributed">
                <td class="red" id="addDistributedCircles">Add Distributed Circles <input id="nbAddDistributedCircles" type="number" value="10" style="width:50px" /></td>
            </tr>
            <tr class="group">
                <td colspan="3">Group transition</td>
            </tr>
            <tr class="group">
                <td rowspan="2" class="green" id="createPolygon">Create</td>
                <td class="red" id="movePolygon">Test 1</td>
                <td rowspan="2" class="red" id="removePolygon">Remove</td>
            </tr>
            <tr class="group">
                <td class="red">Test 2 (not implemented)</td>
            </tr>
        </table>
    </div>

    <div id="control_1" style="display:none">
        Here will be the control panel for test 1
    </div>

    <div id="control_2" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="changeValues">Change Values</td>
            </tr>
            <tr>
                <td class="green">Transition Duration : <input id="timeTr" type="number" value="1000" style="width:60px" /></td>
            </tr>
        </table>            
</div>

</body>
</html>
