@using System.IO
@using System.Web.Helpers
@using GDO.Core
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        body {
            background: #222;
            color: #FFF;
            font-family: helvetica;
            font-size: 70%;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .thumb {
            height: 75px;
            border: 1px solid #000;
            margin: 10px 5px 0 0;
        }

        .table_control td {
            text-align:center;
            border: 1px solid #FFF;
            padding: 8px;
            font-size:1.4em;

            /* Unselectable */
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        table.table_control {
            /*border-collapse:collapse;*/
        }

        .green {
            background-color:#006400;
        }

        .green:active {
            background-color:#005400;
        }
        
        .red {
            background-color:#8B0000;
        }

    </style>
</head>
<body>
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="../../Scripts/d3.js"></script>
    <script src="./Scripts/jszip.min.js"></script>
    <script>
        d3.selection.prototype.moveToFront = function () {
            return this.each(function () {
                this.parentNode.appendChild(this);
            });
        };

        d3.selection.prototype.moveToBack = function () {
            return this.each(function () {
                var firstChild = this.parentNode.firstChild;
                if (firstChild) {
                    this.parentNode.insertBefore(this, firstChild);
                }
            });
        };

    </script>
    <script>
        function getUrlVar(variable) {
            /// <summary>
            /// Gets the URL variable.
            /// </summary>
            /// <param name="variable">The variable.</param>
            /// <returns></returns>
            var query = window.location.search.substring(1);
            var vars = query.split('&');
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split('=');
                if (pair[0] === variable) {
                    return pair[1];
                }
            }
            query = window.frames['control_frame_content'].location.search.substring(1);
            vars = query.split('&');
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split('=');
                if (pair[0] === variable) {
                    return pair[1];
                }
            }
            return (false);
        }

        $(function() {
            $(document).ready(function() {
                var gdo = parent.gdo,
                    server = gdo.net.app.DD3.server;
                gdo.controlId = getUrlVar("controlId");
                var instanceId,
                    confId,
                    numClients;

                var test_bench = [];

                var callback = function(message) {
                    gdo.consoleOut(".DD3", 4, "Callback Message: " + message);
                    confId = message.configurationId;
                    numClients = message.numClient;
                    if (message.state == 1) {
                        test_bench[confId] && test_bench[confId]();
                        test_bench[confId] = null;
                        $("#wait").css("display", "none");
                        if (confId === 6 || confId === 7 || confId === 8 || confId === 9) { // all of these are Shangai LinkLoad, and should share the control menu
                            $("#control_6").css("display", "");
                        } else {
                            $("#control_" + confId).css("display", "");
                        }
                    }
                };

                var order = function(name, args) {
                    return JSON.stringify({ name: name, args: args });
                };

                if (!gdo.net.app["DD3"].initControl) {
                    $("#wait").css("display", "none");
                    $("#error").css("display", "");
                    return;
                }

                instanceId = gdo.net.app["DD3"].initControl(callback);

                test_bench[0] = function() {
                    var rect = false, circles = 0, dcircles = 0, polygon = false;

                    // == Basic Moves ==

                    $('#createRect').click(function() {
                        if (!rect) {
                            server.sendOrder(instanceId, order("createRect", []), false);
                            $(".basic_moves .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            rect = true;
                        }
                    });

                    $('#removeRect').click(function() {
                        if (rect) {
                            server.sendOrder(instanceId, order("removeRect", []), false);
                            $(".basic_moves .green").removeClass("green").addClass("red");
                            $('#createRect').removeClass("red").addClass("green");
                            rect = false;
                        }
                    });

                    $('#translationX').click(function() {
                        rect && server.sendOrder(instanceId, order("startXTranslation", ['X']), false);
                    });

                    $('#translationY').click(function() {
                        rect && server.sendOrder(instanceId, order("startYTranslation", ['Y']), false);
                    });

                    $('#rotation').click(function() {
                        rect && server.sendOrder(instanceId, order("startRotation", ['R']), false);
                    });

                    $('#allMoves').click(function() {
                        if (rect) {
                            server.sendOrder(instanceId, order("startXTranslation", ["X"]), false);
                            server.sendOrder(instanceId, order("startYTranslation", ["Y"]), false);
                            server.sendOrder(instanceId, order("startRotation", ["R"]), false);
                        }
                    });

                    // == Superposition ==

                    $('#createCircles').click(function() {
                        if (!circles) {
                            circles = 100;
                            server.sendOrder(instanceId, order("createCircles", [circles, 1]), false);
                            $(".superposition.non_distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spanc").text(circles)
                        }
                    });

                    $('#createDistributedCircles').click(function() {
                        if (!dcircles) {
                            dcircles = 10;
                            server.sendOrder(instanceId, order("createDistributedCircles", [dcircles, 0.9]), true);
                            $(".superposition.distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spandc").text(dcircles * numClients)
                        }
                    });

                    $('#removeCircles').click(function() {
                        if (!!circles) {
                            server.sendOrder(instanceId, order("removeCircles", []), false);
                            $(".superposition.non_distributed .green").removeClass("green").addClass("red");
                            $('#createCircles').removeClass("red").addClass("green");
                            circles = 0;
                            $("#spanc").text("");
                        }
                    });

                    $('#removeDistributedCircles').click(function() {
                        if (!!dcircles) {
                            server.sendOrder(instanceId, order("removeDistributedCircles", []), true);
                            $(".superposition.distributed .green").removeClass("green").addClass("red");
                            $('#createDistributedCircles').removeClass("red").addClass("green");
                            dcircles = 0;
                            $("#spandc").text("");
                        }
                    });

                    $("#nbAddCircles").click(function(e) { e.stopPropagation(); });

                    $('#addCircles').click(function() {
                        var n = +$("#nbAddCircles").val();
                        circles && (server.sendOrder(instanceId, order("createCircles", [n]), false), $("#spanc").text(circles += n));
                    });

                    $("#nbAddDistributedCircles").click(function(e) { e.stopPropagation(); });

                    $('#addDistributedCircles').click(function() {
                        var n = +$("#nbAddDistributedCircles").val();
                        dcircles && (server.sendOrder(instanceId, order("createDistributedCircles", [n, 0.9]), true), $("#spandc").text((dcircles += n) * numClients));
                    });

                    $('#moveCircles').click(function() {
                        circles && server.sendOrder(instanceId, order("startMoveCircles", []), false);
                    });

                    $('#moveDistributedCircles').click(function() {
                        dcircles && server.sendOrder(instanceId, order("startMoveDistributedCircles", []), true);
                    });

                    // == Group Transition ==

                    $('#createPolygon').click(function() {
                        if (!polygon) {
                            server.sendOrder(instanceId, order("createPolygon", []), false);
                            $(".group .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            polygon = true;
                        }
                    });

                    $('#removePolygon').click(function() {
                        if (polygon) {
                            server.sendOrder(instanceId, order("removePolygon", []), false);
                            $(".group .green").removeClass("green").addClass("red");
                            $('#createPolygon').removeClass("red").addClass("green");
                            polygon = false;
                        }
                    });

                    $('#movePolygon').click(function() {
                        polygon && server.sendOrder(instanceId, order("startMovePolygon", []), false);
                    });

                };

                test_bench[1] = function() {
                    var dataIds = ["scatterplot33", "scatterplot100", "scatterplot500", "scatterplot1000", "scatterplot4000", "scatterplot20000"];

                    var table = $("#control_1 table");
                    var send = function(value) {
                        server.sendOrder(instanceId, order("plot", [value]), true);
                    };

                    dataIds.forEach(function(d) {
                        table.append('<tr><td>' + d + '</td></tr>');
                        table.find("tr:last td").addClass('green').click(send.bind(null, d));
                    });
                };

                test_bench[2] = function() {
                    $("#changeValues").click(function() {
                        var n = +$("#timeTr").val();
                        server.sendOrder(instanceId, order("changeValues", [n]), true);
                    });
                };

                test_bench[3] = function() {
                    var id = 0;
                    var previous;
                    var timeout = -1;
                    var sensibility = 100;
                    var pos = {};
                    var posC = {};
                    var wr = 1400, hr = 600;
                    var selected = "";
                    d3.select("#control_3").selectAll("svg").remove();
                    var svg = d3.select("#control_3").append("svg").attr("width", wr + "px").attr("height", hr + "px");

                    svg.append("rect").attr("x", 0)
                        .attr("y", 0)
                        .attr("width", wr + "px")
                        .attr("height", hr + "px")
                        .attr("stroke", "black")
                        .style("fill", "#EEE")
                        .on("click", function() {
                            selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                            selected = "";
                        });

                    var g = svg.append("g");

                    $('#fileInput').on('change', function(event) {
                        var files = event.target.files;

                        for (var i = 0, f; f = files[i]; i++) {

                            var zipReader = new FileReader();
                            zipReader.onload = (function(zipLoadEvent) {
                                return function(zipEvent) {
                                    var zip = JSZip(zipEvent.target.result);
                                    $.each(zip.files, function (index, file) {
                                        
                                        var inzip_extension = file.name.split('.').pop();
                                        if (inzip_extension === 'png' || inzip_extension === 'jpg' || inzip_extension === 'gif') {
                                            var blobed = URL.createObjectURL(new Blob([zip.file(file.name).asArrayBuffer()], { type: 'image/' + inzip_extension }));
                                            id++;
                                            server.sendOrder(instanceId, order("createRect", ['d' + id, blobed]), false);

                                            var drag = d3.behavior.drag();
                                            var dragC = d3.behavior.drag();

                                            drag.on("drag", moveRect);
                                            drag.on("dragstart", function() {
                                                d3.select(this.parentElement).moveToFront();
                                                var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                                                previous = Date.now();
                                                pos.x = t[0] - d3.mouse(g.node())[0];
                                                pos.y = t[1] - d3.mouse(g.node())[1];
                                            });

                                            dragC.on("drag", resizeRect);
                                            dragC.on("dragstart", function() {
                                                d3.select(this.parentElement).moveToFront();
                                                var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                                                previous = Date.now();
                                                posC.x = t[0] - d3.mouse(g.node())[0];
                                                posC.y = t[1] - d3.mouse(g.node())[1];
                                            });

                                            //Custom offset that stays in bounds and tranlate image on x&y according to ID
                                            var offx = 10 + ((id - 1) * (wr / 10)) % (wr - (2 * wr / 10));
                                            var offy = 10 + ((hr / 10) * (((id - 1) * (wr / 10)) / (wr - (2 * wr / 10))) % (hr - (2 * hr / 10)));
                                            var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                                            var r = rg.append("rect").attr("x", 0)
                                                .attr("y", 0)
                                                .attr("width", 2 * wr / 10)
                                                .attr("height", 2 * hr / 10)
                                                .attr("stroke", "black")
                                                .attr("fill", "#EEE")
                                                .call(drag)
                                                .on("click", function() {
                                                    selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                                                    selected = this.parentElement.id;
                                                    d3.select(this).style("fill", "#FDD1FD");
                                                    //this.parentElement.parentElement.appendChild(this.parentElement);
                                                    //server.sendOrder(instanceId, order("frontRect", [selected]), false);
                                                });

                                            rg.append("circle").attr("cx", wr * 2 / 10)
                                                .attr("cy", hr * 2 / 10)
                                                .attr("r", 20)
                                                .attr("stroke", "transparent")
                                                .attr("fill", "rgba(252,231,31,0.5)")
                                                .call(dragC);

                                            server.sendOrder(instanceId, order("resizeRect", [r.node().parentElement.id, r.attr("width") / wr, r.attr("height") / hr]), false);
                                            /* Add rect END*/
                                        } //End if image
                                    }); //End each zip file
                                };
                            })(f); // End loded zip

                            var extension = f.name.split('.').pop();

                            if (extension === 'png' || extension === 'jpg' || extension === 'gif') {
                                /* Add rect */
                                id++;
                                server.sendOrder(instanceId, order("createRect", ['d' + id, URL.createObjectURL(f)]), false);
                                var drag = d3.behavior.drag();
                                var dragC = d3.behavior.drag();

                                drag.on("drag", moveRect);
                                drag.on("dragstart", function() {
                                    d3.select(this.parentElement).moveToFront();
                                    var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                                    previous = Date.now();
                                    pos.x = t[0] - d3.mouse(g.node())[0];
                                    pos.y = t[1] - d3.mouse(g.node())[1];
                                });

                                dragC.on("drag", resizeRect);
                                dragC.on("dragstart", function() {
                                    d3.select(this.parentElement).moveToFront();
                                    var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                                    previous = Date.now();
                                    posC.x = t[0] - d3.mouse(g.node())[0];
                                    posC.y = t[1] - d3.mouse(g.node())[1];
                                });

                                //Custom offset that stays in bounds and tranlate image on x&y according to ID
                                var offx = 10 + ((id - 1) * (wr / 10)) % (wr - (2 * wr / 10));
                                var offy = 10 + ((hr / 10) * (((id - 1) * (wr / 10)) / (wr - (2 * wr / 10))) % (hr - (2 * hr / 10)));
                                var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                                var r = rg.append("rect").attr("x", 0)
                                    .attr("y", 0)
                                    .attr("width", 2 * wr / 10)
                                    .attr("height", 2 * hr / 10)
                                    .attr("stroke", "black")
                                    .attr("fill", "#EEE")
                                    .call(drag)
                                    .on("click", function() {
                                        selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                                        selected = this.parentElement.id;
                                        d3.select(this).style("fill", "#FDD1FD");
                                        //this.parentElement.parentElement.appendChild(this.parentElement);
                                        //server.sendOrder(instanceId, order("frontRect", [selected]), false);
                                    });

                                rg.append("circle").attr("cx", wr * 2 / 10)
                                    .attr("cy", hr * 2 / 10)
                                    .attr("r", 20)
                                    .attr("stroke", "transparent")
                                    .attr("fill", "rgba(252,231,31,0.5)")
                                    .call(dragC);

                                //server.sendOrder(instanceId, order("resizeRect", [r.node().parentElement.id, r.attr("width") / wr, r.attr("height") / hr]), false);
                                /* Add rect END*/
                            } else if (extension === 'zip') {
                                zipReader.readAsArrayBuffer(f);
                            }

                        } //End html input files loop
                    }); //End handler onchange input
                

                    $('#addUrl').click(function() {
                        var urlval = $('#inputUrl').val();
                        if (urlval === "") {
                            $('#inputUrl').val('https://upload.wikimedia.org/wikipedia/commons/6/65/Kochsim.gif');
                            return;
                        }
                        id++;
                        server.sendOrder(instanceId, order("createRect", ['d' + id, urlval]), false);
                        var drag = d3.behavior.drag();
                        var dragC = d3.behavior.drag();

                        drag.on("drag", moveRect);
                        drag.on("dragstart", function () {
                            d3.select(this.parentElement).moveToFront();
                            var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                            previous = Date.now();
                            pos.x = t[0] - d3.mouse(g.node())[0];
                            pos.y = t[1] - d3.mouse(g.node())[1];
                        });

                        dragC.on("drag", resizeRect);
                        dragC.on("dragstart", function () {
                            d3.select(this.parentElement).moveToFront();
                            var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                            previous = Date.now();
                            posC.x = t[0] - d3.mouse(g.node())[0];
                            posC.y = t[1] - d3.mouse(g.node())[1];
                        });

                        //Custom offset that stays in bounds and tranlate image on x&y according to ID
                        var offx = 10 + ((id - 1) * (wr / 10)) % (wr - (2 * wr / 10));
                        var offy = 10 + ((hr / 10) * (((id - 1) * (wr / 10)) / (wr - (2 * wr / 10))) % (hr - (2 * hr / 10)));
                        var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                        var r = rg.append("rect").attr("x", 0)
                            .attr("y", 0)
                            .attr("width", 2 * wr / 10)
                            .attr("height", 2 * hr / 10)
                            .attr("stroke", "black")
                            .attr("fill", "#EEE")
                            .call(drag)
                            .on("click", function () {
                                selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                                selected = this.parentElement.id;
                                d3.select(this).style("fill", "#FDD1FD");
                                //this.parentElement.parentElement.appendChild(this.parentElement);
                                //server.sendOrder(instanceId, order("frontRect", [selected]), false);
                            });

                        rg.append("circle").attr("cx", wr * 2 / 10)
                            .attr("cy", hr * 2 / 10)
                            .attr("r", 20)
                            .attr("stroke", "transparent")
                            .attr("fill", "rgba(252,231,31,0.5)")
                            .call(dragC);

                       // server.sendOrder(instanceId, order("resizeRect", [r.node().parentElement.id, r.attr("width") / wr, r.attr("height") / hr]), false);
                    });

                    $("#addRect").click(function () {
                        id++;
                        server.sendOrder(instanceId, order("createRect", ['d' + id, 'illustration.png']), false);
                        var drag = d3.behavior.drag();
                        var dragC = d3.behavior.drag();

                        drag.on("drag", moveRect);
                        drag.on("dragstart", function () {
                            d3.select(this.parentElement).moveToFront();
                            var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                            previous = Date.now();
                            pos.x = t[0] - d3.mouse(g.node())[0];
                            pos.y = t[1] - d3.mouse(g.node())[1];
                        });

                        dragC.on("drag", resizeRect);
                        dragC.on("dragstart", function () {
                            d3.select(this.parentElement).moveToFront();
                            var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                            previous = Date.now();
                            posC.x = t[0] - d3.mouse(g.node())[0];
                            posC.y = t[1] - d3.mouse(g.node())[1];
                        });

                        //Custom offset that stays in bounds and tranlate image on x&y according to ID
                        var offx = 10 + ((id - 1) * (wr / 10)) % (wr - (2 * wr / 10));
                        var offy = ((hr / 10) * (((id - 1) * (wr / 10)) / (wr - (2 * wr / 10))) % (hr - (2 * hr / 10)));
                        var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                        var r = rg.append("rect").attr("x", 0)
                            .attr("y", 0)
                            .attr("width", 2 * wr / 10)
                            .attr("height", 2 * hr / 10)
                            .attr("stroke", "black")
                            .attr("fill", "#EEE")
                            .call(drag)
                            .on("click", function () {
                                selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                                selected = this.parentElement.id;
                                d3.select(this).style("fill", "#FDD1FD");
                                //this.parentElement.parentElement.appendChild(this.parentElement);
                                //server.sendOrder(instanceId, order("frontRect", [selected]), false);
                            });

                        rg.append("circle").attr("cx", wr * 2 / 10)
                            .attr("cy", hr * 2 / 10)
                            .attr("r", 10)
                            .attr("stroke", "transparent")
                            .attr("fill", "rgba(252,231,31,0.5)")
                            .call(dragC);

                       // server.sendOrder(instanceId, order("resizeRect", [r.node().parentElement.id, r.attr("width") / wr, r.attr("height") / hr]), false);
                    });

                    $("#sens").change(function () {
                        sensibility = +this.value;
                    });

                    var moveRect = function () {
                        var o = order("moveRect", [this.parentElement.id, (d3.mouse(g.node())[0] + pos.x) / wr, (d3.mouse(g.node())[1] + pos.y) / hr]),
                            tr = [d3.mouse(g.node())[0] + pos.x, d3.mouse(g.node())[1] + pos.y];

                        var move = function () {
                            server.sendOrder(instanceId, o, false);
                            previous = Date.now();
                        };

                        d3.select(this.parentElement).attr("transform", "translate(" + tr + ")");
                        clearTimeout(timeout);
                        timeout = setTimeout(move, Math.max(0, sensibility - (Date.now() - previous)));
                    };

                    var resizeRect = function () {
                        var x = Math.max(d3.mouse(this)[0], 0), y = Math.max(0, d3.mouse(this)[1]),
                            o = order("resizeRect", [this.parentElement.id, x / wr, y / hr]);

                        var resize = function () {
                            server.sendOrder(instanceId, o, false);
                            previous = Date.now();
                        };

                        d3.select(this.parentElement).select('rect').attr("width", x).attr("height", y);
                        d3.select(this).attr("cx", x).attr("cy", y);
                        clearTimeout(timeout);
                        timeout = setTimeout(resize, Math.max(0, sensibility - (Date.now() - previous)));
                    };

                    var delRect = function () {
                        server.sendOrder(instanceId, order("delRect", [this.id]), false);
                        d3.select(this).remove();
                    };

                    $("#removeAllRect").click(function () {
                        server.sendOrder(instanceId, order("delAllRect", []), true);
                        d3.selectAll('g.r').remove();
                    });

                    server.sendOrder(instanceId, order("delAllRect", []), true);
                };

                test_bench[4] = function () {
                    $('#launchEntryAnimationLondon').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [0]), true);
                    });

                    $('#launchExitAnimationLondon').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [1]), true);
                    });
                };

                test_bench[5] = function () {
                    $('#launchEntryAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [0]), true);
                    });

                    /*
                    $('#cleanupAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("cleanupAnimation", []), true);
                    });

                    $('#pauseAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("pauseAnimation", []), true);
                    });

                    $('#startAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("startAnimation", []), true);
                    });

                    $('#initAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("initAnimation", []), true);
                    });

                    $('#createAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("createAnimation", []), true);
                    });
                    //*/

                    $('#launchExitAnimationShanghai').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [1]), true);
                    });
                };

                test_bench[6] = test_bench[7] = test_bench[8] = test_bench[9] = function () {
                    var cb = $('#outterCheckbox');
                    var cb2 = $('#widthChangingCheckbox');
                    var cb3 = $('#widthChangingLinkLoadCheckbox');

                    $('#launchNormalAnimationShanghaiLines').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [0, cb.prop("checked"), cb2.prop("checked"), cb3.prop("checked")]), true);
                    });

                    $('#launchDisruptedAnimationShanghaiLines').click(function () {
                        server.sendOrder(instanceId, order("launchAnimation", [1, cb.prop("checked"), cb2.prop("checked"), cb3.prop("checked")]), true);
                    });
                };
            });
        });
    </script>

    <div id="wait" style="">
        Please wait while app is initializing...
    </div>

    <div id="error" style="display:none">
        <p style="color: rgb(237, 20, 51);font-size: 2.5em;">
            :(
        </p>
        <p style="color: rgb(237, 20, 51);font-size:2.5em;">
            Something went wrong, please <a href="javascript:parent.location.href=parent.location.href" style="color: rgb(237, 20, 51);">reload</a> the page<br>
            <span style="color:firebrick;font-size:0.7em;font-style:italic"> Error : the function 'initControl' was not initialized</span>
        </p>
    </div>

    <div id="control_0" style="display:none">
        <table class="table_control">
            <tr class="basic_moves">
                <td colspan="3">Basic moves</td>
            </tr>
            <tr class="basic_moves">
                <td rowspan="4" class="green" id="createRect">Create Rectangle</td>
                <td class="red" id="translationX">X Translation</td>
                <td rowspan="4" class="red" id="removeRect">Remove Rectangle</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="translationY">Y Translation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="rotation">Rotation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="allMoves">All</td>
            </tr>
            <tr class="superposition">
                <td colspan="3">Superposition</td>
            </tr>
            <tr class="superposition non_distributed">
                <td rowspan="2" class="green" id="createCircles">Create Circles</td>
                <td class="red" id="moveCircles">Move <span id="spanc"></span> Circles</td>
                <td rowspan="2" class="red" id="removeCircles">Remove Circles</td>
            </tr>
            <tr class="superposition non_distributed">
                <td class="red" id="addCircles">Add Circles <input id="nbAddCircles" type="number" value="100" style="width:50px"/></td>
            </tr>
            <tr class="superposition distributed">
                <td rowspan="2" class="green" id="createDistributedCircles">Create distributed Circles</td>
                <td class="red" id="moveDistributedCircles">Move <span id="spandc"></span> distributed Circles</td>
                <td rowspan="2" class="red" id="removeDistributedCircles">Remove distributed Circles</td>
            </tr>
            <tr class="superposition distributed">
                <td class="red" id="addDistributedCircles">Add Distributed Circles <input id="nbAddDistributedCircles" type="number" value="10" style="width:50px" /></td>
            </tr>
            <tr class="group">
                <td colspan="3">Group transition</td>
            </tr>
            <tr class="group">
                <td rowspan="2" class="green" id="createPolygon">Create</td>
                <td class="red" id="movePolygon">Test 1</td>
                <td rowspan="2" class="red" id="removePolygon">Remove</td>
            </tr>
            <tr class="group">
                <td class="red">Test 2 (not implemented)</td>
            </tr>
        </table>
    </div>

    <div id="control_1" style="display:none">
        <table class="table_control">

        </table>
    </div>

    <div id="control_2" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="changeValues">Change Values</td>
            </tr>
            <tr>
                <td class="green">Transition Duration : <input id="timeTr" type="number" value="1000" style="width:60px" /></td>
            </tr>
        </table>            
</div>

    <div id="control_3" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="addRect">Add Rectangle</td>
            </tr>
            <tr>
                <td class="green" id="addUrl">Add Image Url</td>
                <td class="" id="urlinputtd"><input id="inputUrl" type="url"/></td>
            </tr>
            <tr>
                <td class="green" id="addFiles">Add files (.zip, .png, jpg, .gif)</td>
                <td class=""><input id="fileInput" type="file"/></td>
            </tr>
            <tr>
                <td class="green" id="removeAllRect">Remove All</td>
            </tr>
            <tr>
                <td class="green">Sensibility (ms) <input id="sens" type="number" value="100" style="width:40px" /></td>
            </tr>
        </table> 
    </div>

    <div id="control_4" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="launchEntryAnimationLondon">Launch Animation of entries</td>
            </tr>
            <tr>
                <td class="green" id="launchExitAnimationLondon">Launch Animation of exit</td>
            </tr>
        </table>
    </div>

    <div id="control_5" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="launchEntryAnimationShanghai">Launch Animation of entries</td>
            </tr>
            <tr>
                <td class="green" id="launchExitAnimationShanghai">Launch Animation of exit</td>
            </tr>
            <!--
            <tr>
                <td class="green" id="createAnimationShanghai">Create</td>
            </tr>
            <tr>
                <td class="green" id="initAnimationShanghai">Init</td>
            </tr>
            <tr>
                <td class="green" id="startAnimationShanghai">Start</td>
            </tr>
            <tr>
                <td class="green" id="pauseAnimationShanghai">Pause</td>
            </tr>
            <tr>
                <td class="green" id="cleanupAnimationShanghai">Cleanup</td>
            </tr>
            <!---->
        </table>
    </div>
    
    <div id="control_6" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green"><INPUT type="checkbox" name="outter" id="outterCheckbox"> With outter lines (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green"><INPUT type="checkbox" name="widthChanging" id="widthChangingCheckbox" checked> Width changing (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green"><INPUT type="checkbox" name="widthChangingLinkLoad" id="widthChangingLinkLoadCheckbox"> Width represents link load (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green" id="launchNormalAnimationShanghaiLines">Launch Animation with normal data</td>
            </tr>
            <tr>
                <td class="green" id="launchDisruptedAnimationShanghaiLines">Launch Animation with disrupted data</td>
            </tr>
        </table>
    </div>

</body>
</html>
