@using System
@using System.IO
@using System.IO.Compression
@using System.Web.Helpers
@using GDO.Core
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        body {
            background: #222;
            color: #FFF;
            font-family: helvetica;
            font-size: 70%;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .thumb {
            height: 75px;
            border: 1px solid #000;
            margin: 10px 5px 0 0;
        }

        .table_control td {
            text-align:center;
            border: 1px solid #FFF;
            padding: 8px;
            font-size:1.4em;

            /* Unselectable */
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        table.table_control {
            /*border-collapse:collapse;*/
        }

        .green {
            background-color:#006400;
        }

        .green:active {
            background-color:#005400;
        }
        
        .red {
            background-color:#8B0000;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .x.axis path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }


    </style>
</head>
<body>
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="../../Scripts/d3.js"></script>
    <script src="../../Scripts/peer.js"></script>
    <script>
        d3.selection.prototype.moveToFront = function () {
            return this.each(function () {
                this.parentNode.appendChild(this);
            });
        };

        d3.selection.prototype.moveToBack = function () {
            return this.each(function () {
                var firstChild = this.parentNode.firstChild;
                if (firstChild) {
                    this.parentNode.insertBefore(this, firstChild);
                }
            });
        };

    </script>
<script>
    function getUrlVar(variable) {
        /// <summary>
        /// Gets the URL variable.
        /// </summary>
        /// <param name="variable">The variable.</param>
        /// <returns></returns>
        var query = window.location.search.substring(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (pair[0] === variable) {
                return pair[1];
            }
        }
        query = window.frames['control_frame_content'].location.search.substring(1);
        vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (pair[0] === variable) {
                return pair[1];
            }
        }
		return false;
    }

        $(function () {
            $(document).ready(function () {
                var gdo = parent.gdo,
                    server = gdo.net.app.DD3.server;
                gdo.controlId = parseInt(getUrlVar("controlId"));
                var instanceId,
                    confId,
                    numClients;

                var test_bench = [];

                var callback = function (message) {
                    gdo.consoleOut(".DD3", 4, "Callback Message: " + message);
                    confId = message.configurationId;
                    numClients = message.numClient;
                    if (message.state == 1) {
                        test_bench[confId] && test_bench[confId]();
                        test_bench[confId] = null;
                        $("#wait").css("display", "none");
                        if (confId === 6 || confId === 7 || confId === 8 || confId === 9) {  // all of these are Shangai LinkLoad, and should share the control menu
                            $("#control_6").css("display", "");
                        }else {
                            $("#control_" + confId).css("display", "");
                        }
                    }
                };

                var order = function (name, args) {
                    return JSON.stringify({ name: name, args: args });
                };

                if (!gdo.net.app["DD3"].initControl) {
                    $("#wait").css("display", "none");
                    if (confId === 6 || confId === 7 || confId === 8 || confId === 9) { // all of these are Shangai LinkLoad, and should share the control menu
                        $("#control_6").css("display", "");
                    } else {
                        $("#control_" + confId).css("display", "");
                    }
                }
            

            var order = function(name, args) {
                return JSON.stringify({ name: name, args: args });
            };


                    // == FPS ==
                    var peerObject = { host: "146.169.32.109", port: 55555 };
                    //{ host: "localhost", port: 55555 };
                    //{ host: "146.169.32.109", port: 55555 }
                    var con_peer= new Peer("idofthecontrollerfordd3", peerObject);
                    con_peer.on('open', function (conn) {
                        gdo.consoleOut(".DD3", 4, "The peer client of the controller is opened");
                    });
                    var dataset = [];
                    var eventLog = [];

                    con_peer.on('connection', function (conn) {
                        eventLog.push([new Date().getTime(), "Connecting with  "+ conn.label]);
                        conn.on('data', function (data) {
                            var raw = data.split(';');
                            var row = raw[0];
                            var col = raw[1];
                            var nbr = raw[2];
                            var nbc = raw[3];
                            var nbdc = raw[4];
                            var ts = raw[5];
                            var fps = raw[6];
                            var std = raw[7];
                            dataset.push([row, col, nbr, nbc, nbdc, ts, fps, std]);
                            //gdo.consoleOut(".DD3", 4, dataset);
                            //updateFPSChart();
                        });
                    });
                    
                    

            if (!gdo.net.app["DD3"].initControl) {
                $("#wait").css("display", "none");
                $("#error").css("display", "");
                return;
            }

            instanceId = gdo.net.app["DD3"].initControl(callback);

            test_bench[0] = function() {
                var rect = false, circles = 0, dcircles = 0, polygon = false;

                // == Basic Moves ==

                $('#createRect').click(function () {
                    if (!rect) {
                        server.sendOrder(instanceId, order("createRect", []), false);
                        $(".basic_moves .red").removeClass("red").addClass("green");
                        $(this).removeClass("green").addClass("red");
                        rect = true;
                        eventLog.push([new Date().getTime(), "Creating Rectangles"]);
                    }
                });

                $('#removeRect').click(function () {
                    if (rect) {
                        server.sendOrder(instanceId, order("removeRect", []), false);
                        $(".basic_moves .green").removeClass("green").addClass("red");
                        $('#createRect').removeClass("red").addClass("green");
                        rect = false;
                        eventLog.push([new Date().getTime(), "Removing Rectangles"]);
                    }
                });

                $('#translationX').click(function () {
                    if (rect) {
                        server.sendOrder(instanceId, order("startXTranslation", ['X']), false);
                        eventLog.push([new Date().getTime(), "Starting X Translation"]);
                    }
                });

                $('#translationY').click(function () {
                    if (rect) {
                        server.sendOrder(instanceId, order("startYTranslation", ['Y']), false);
                        eventLog.push([new Date().getTime(), "Starting Y Translation"]);
                    }
                        
                });

                $('#rotation').click(function () {
                    if (rect) {
                        server.sendOrder(instanceId, order("startRotation", ['R']), false);
                        eventLog.push([new Date().getTime(), "Starting Rotation"]);
                    }
                });

                $('#allMoves').click(function () {
                    if (rect) {
                        server.sendOrder(instanceId, order("startXTranslation", ["X"]), false);
                        server.sendOrder(instanceId, order("startYTranslation", ["Y"]), false);
                        server.sendOrder(instanceId, order("startRotation", ["R"]), false);
                        eventLog.push([new Date().getTime(), "Starting All moves"]);
                    }
                });
                    $('#createCircles').click(function () {
                        if (!circles) {
                            circles = 100;
                            server.sendOrder(instanceId, order("createCircles", [circles, 1]), false);
                            $(".superposition.non_distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spanc").text(circles)
                            eventLog.push([new Date().getTime(), "Creating Circles"]);
                        }
                    });

                    $('#createDistributedCircles').click(function () {
                        if (!dcircles) {
                            dcircles = 10;
                            server.sendOrder(instanceId, order("createDistributedCircles", [dcircles, 0.9]), true);
                            $(".superposition.distributed .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            $("#spandc").text(dcircles * numClients);
                            eventLog.push([new Date().getTime(), "Creating Distributed Circles"]);
                        }
                    });

                    $('#removeCircles').click(function () {
                        if (!!circles) {
                            server.sendOrder(instanceId, order("removeCircles", []), false);
                            $(".superposition.non_distributed .green").removeClass("green").addClass("red");
                            $('#createCircles').removeClass("red").addClass("green");
                            circles = 0;
                            $("#spanc").text("");
                            eventLog.push([new Date().getTime(), "Removing Circles"]);
                        }
                    });

                    $('#removeDistributedCircles').click(function () {
                        if (!!dcircles) {
                            server.sendOrder(instanceId, order("removeDistributedCircles", []), true);
                            $(".superposition.distributed .green").removeClass("green").addClass("red");
                            $('#createDistributedCircles').removeClass("red").addClass("green");
                            dcircles = 0;
                            $("#spandc").text("");
                            eventLog.push([new Date().getTime(), "Removing Distributed Circles"]);
                        }
                    });


                $("#nbAddCircles").click(function(e) { e.stopPropagation(); });

                    $('#addCircles').click(function () {
                        var n = +$("#nbAddCircles").val();
                        if (circles) {
                            server.sendOrder(instanceId, order("createCircles", [n]), false);
                            $("#spanc").text(circles += n);
                            eventLog.push([new Date().getTime(), "Adding " + n + " Circles"]);
                        }
                    });

                $("#nbAddDistributedCircles").click(function(e) { e.stopPropagation(); });

                    $('#addDistributedCircles').click(function () {
                        var n = +$("#nbAddDistributedCircles").val();
                        if(dcircles){
                            server.sendOrder(instanceId, order("createDistributedCircles", [n, 0.9]), true);
                            $("#spandc").text((dcircles += n) * numClients);
                            eventLog.push([new Date().getTime(), "Adding "+n+" Distributed Circles"]);
                        }
                    });

                    $('#moveCircles').click(function () {
                        if(circles){
                            server.sendOrder(instanceId, order("startMoveCircles", []), false);
                            eventLog.push([new Date().getTime(), "Moving Circles"]);
                        }
                    });

                    $('#moveDistributedCircles').click(function () {
                        if(dcircles){
                            server.sendOrder(instanceId, order("startMoveDistributedCircles", []), true);
                            eventLog.push([new Date().getTime(), "Moving Distributed Circles"]);
                        }
                    });

                // == Group Transition ==

                    $('#createPolygon').click(function () {
                        if (!polygon) {
                            server.sendOrder(instanceId, order("createPolygon", []), false);
                            $(".group .red").removeClass("red").addClass("green");
                            $(this).removeClass("green").addClass("red");
                            polygon = true;
                            eventLog.push([new Date().getTime(), "Creating Polygons"]);
                        }
                    });

                    $('#removePolygon').click(function () {
                        if (polygon) {
                            server.sendOrder(instanceId, order("removePolygon", []), false);
                            $(".group .green").removeClass("green").addClass("red");
                            $('#createPolygon').removeClass("red").addClass("green");
                            polygon = false;
                            eventLog.push([new Date().getTime(), "Removing Polygons"]);
                        }
                    });

                    $('#movePolygon').click(function () {
                        if (polygon) {
                            server.sendOrder(instanceId, order("startMovePolygon", []), false);
                            eventLog.push([new Date().getTime(), "Moving Polygons"]);
                        }
                    });

                    $('#fps_data').click(function () {
                        var csvContent = "data:text/csv;charset=utf-8,";
                        csvContent += "Row; Column; Rectangles; Circles; Distributed Circles; Timestamp; Average FPS; Standard Deviation FPS \n";
                        dataset.forEach(function (infoArray, index) {
                            dataString = infoArray.join(";");
                            csvContent += index < dataset.length ? dataString + "\n" : dataString;
                        });
                        var encodedUri = encodeURI(csvContent);
                        var link = document.createElement("a");
                        link.setAttribute("href", encodedUri);
                        link.setAttribute("download", "fps_data.csv");
                        link.click();
                    });

                    $('#event_data').click(function () {
                        var csvContent = "data:text/csv;charset=utf-8,";
                        eventLog.forEach(function (infoArray, index) {
                            dataString = infoArray.join(",");
                            csvContent += index < eventLog.length ? dataString + "\n" : dataString;
                        });
                        var encodedUri = encodeURI(csvContent);
                        var link = document.createElement("a");
                        link.setAttribute("href", encodedUri);
                        link.setAttribute("download", "event_data.csv");
                        link.click();
                    });


            };

            test_bench[1] = function() {
                var dataIds = ["scatterplot33", "scatterplot100", "scatterplot500", "scatterplot1000", "scatterplot4000", "scatterplot20000"];

                var table = $("#control_1 table");
                var send = function(value) {
                    server.sendOrder(instanceId, order("plot", [value]), true);
                };

                dataIds.forEach(function(d) {
                    table.append('<tr><td>' + d + '</td></tr>');
                    table.find("tr:last td").addClass('green').click(send.bind(null, d));
                });
            };

            test_bench[2] = function() {
                $("#changeValues").click(function() {
                    var n = +$("#timeTr").val();
                    server.sendOrder(instanceId, order("changeValues", [n]), true);
                });
            };

            test_bench[3] = function() {
                var id = 0;
                var previous;
                var timeout = -1;
                var sensibility = 100;
                var pos = {};
                var posC = {};
                var wr = 1400, hr = 600;
                var selected = "";

                d3.select("#control_3").selectAll("svg").remove();
                var svg = d3.select("#control_3").append("svg").attr("width", wr + "px").attr("height", hr + "px");

                svg.append("rect").attr("x", 0)
                    .attr("y", 0)
                    .attr("width", wr + "px")
                    .attr("height", hr + "px")
                    .attr("stroke", "black")
                    .style("fill", "#EEE")
                    .on("click", function() {
                        selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                        selected = "";
                    });

                var g = svg.append("g");

                var moveRect = function() {
                    var o = order("moveRect", [this.parentElement.id, (d3.mouse(g.node())[0] + pos.x) / wr, (d3.mouse(g.node())[1] + pos.y) / hr]),
                        tr = [d3.mouse(g.node())[0] + pos.x, d3.mouse(g.node())[1] + pos.y];

                    var move = function() {
                        server.sendOrder(instanceId, o, false);
                        previous = Date.now();
                    };

                    d3.select(this.parentElement).attr("transform", "translate(" + tr + ")");
                    clearTimeout(timeout);
                    timeout = setTimeout(move, Math.max(0, sensibility - (Date.now() - previous)));
                };

                var resizeRect = function() {
                    var x = Math.max(d3.mouse(this)[0], 0),
                        y = Math.max(0, d3.mouse(this)[1]),
                        o = order("resizeRect", [this.parentElement.id, x / wr, y / hr]);

                    var resize = function() {
                        server.sendOrder(instanceId, o, false);
                        previous = Date.now();
                    };

                    d3.select(this.parentElement).select('rect').attr("width", x).attr("height", y);
                    d3.select(this).attr("cx", x).attr("cy", y);
                    clearTimeout(timeout);
                    timeout = setTimeout(resize, Math.max(0, sensibility - (Date.now() - previous)));
                };


                var delRect = function() {
                    server.sendOrder(instanceId, order("delRect", [this.id]), false);
                    d3.select(this).remove();
                };

                var drag = d3.behavior.drag();
                var dragC = d3.behavior.drag();
                drag.on("drag", function() {
                    moveRect.call(this);
                });
                drag.on("dragstart", function() {
                    console.log('move');
                    console.log(this);
                    d3.select(this.parentElement).moveToFront();
                    var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                    previous = Date.now();
                    pos.x = t[0] - d3.mouse(g.node())[0];
                    pos.y = t[1] - d3.mouse(g.node())[1];
                });
                dragC.on("drag", function() {
                    resizeRect.call(this);
                });
                dragC.on("dragstart", function() {
                    console.log('resize');
                    console.log(this);
                    d3.select(this.parentElement).moveToFront();
                    var t = d3.transform(d3.select(this.parentElement).attr("transform")).translate;
                    previous = Date.now();
                    posC.x = t[0] - d3.mouse(g.node())[0];
                    posC.y = t[1] - d3.mouse(g.node())[1];
                });

                var createHostedRect = function(url) {

                    var that = this;
                    var img = new Image();
                    img.onload = function () {
                        console.log(this.width + 'x' + this.height);

                        id++;
                        server.sendOrder(instanceId, order("createRect", ['d' + id, url, this.width, this.height]), false);
                        //Custom offset that stays in bounds and translate image on x&y according to ID
                        var col = (id - 1) % 5, row = Math.floor((id - 1) / 5);
                        var offx = (((2 * wr / 10) * col) % wr) + col;
                        var offy = (((2 * hr / 10) * row) % hr) + row;
                        var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                        var r = rg.append("rect").attr("x", 0)
                            .attr("y", 0)
                            .attr("width", (2 * wr / 10) - 2)
                            .attr("height", (2 * hr / 10) - 2)
                            .attr("stroke", "black")
                            .attr("fill", "#EEE")
                            .call(drag, this)
                            .on("click", function () {
                                selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                                selected = this.parentElement.id;
                                d3.select(this).style("fill", "#FDD1FD");
                            });

                        rg.append("circle").attr("cx", wr * 2 / 10)
                            .attr("cy", hr * 2 / 10)
                            .attr("r", 20)
                            .attr("stroke", "transparent")
                            .attr("fill", "rgba(252,231,31,0.5)")
                            .call(dragC, that);
                    }
                    img.src = url;

                    
                };

                var createLocalRect = function(name, fileobj) {
                    id++;
                    server.sendOrder(instanceId, order("createRect", ['d' + id, "\\Web\\Images\\images\\" + name]), false);

                    //Custom offset that stays in bounds and translate image on x&y according to ID
                    var col = (id - 1) % 5, row = Math.floor((id - 1) / 5);
                    var offx = (((2 * wr / 10) * col) % wr) + col;
                    var offy = (((2 * hr / 10) * row) % hr) + row;
                    var rg = g.append("g").attr("id", "d" + id).classed("r", true).attr("transform", "translate(" + [offx, offy] + ")");
                    var r = rg.append("rect").attr("x", 0)
                        .attr("y", 0)
                        .attr("width", (2 * wr / 10) - 2)
                        .attr("height", (2 * hr / 10) - 2)
                        .attr("stroke", "black")
                        .attr("fill", "#EEE")
                        .call(drag, this)
                        .on("click", function() {
                            selected !== "" ? d3.select("#" + selected + " rect").style("fill", "#EEE") : false;
                            selected = this.parentElement.id;
                            d3.select(this).style("fill", "#FDD1FD");
                        });

                    rg.append("circle").attr("cx", wr * 2 / 10)
                        .attr("cy", hr * 2 / 10)
                        .attr("r", 20)
                        .attr("stroke", "transparent")
                        .attr("fill", "rgba(252,231,31,0.5)")
                        .call(dragC, this);
                };

                $('#fileSelectButton').on('click', function (event) {
                    event.preventDefault();
                    var urlval = $('#fileSelect').val();
                    createHostedRect(urlval);
                }); //End handler onclick input

                $('#allFileSelectButton').on('click', function (event) {
                    event.preventDefault();
                    $('#fileSelect > option').each(function() {
                        createHostedRect(this.value);
                    });
                }); //End handler onclick input

                $('#addUrl').click(function() {
                    var urlval = $('#inputUrl').val();
                    if (urlval === "") {
                        $('#inputUrl').val('https://upload.wikimedia.org/wikipedia/commons/6/65/Kochsim.gif');
                        return;
                    }
                    createHostedRect(urlval);
                });

                $("#addRect").click(function() {
                    createHostedRect('illustration.png');
                });

                $("#sens").change(function() {
                    sensibility = +this.value;
                });


                $("#removeAllRect").click(function() {
                    server.sendOrder(instanceId, order("delAllRect", []), true);
                    d3.selectAll('g.r').remove();
                    id = 0;
                });

                server.sendOrder(instanceId, order("delAllRect", []), true);
            };

            test_bench[4] = function() {
                $('#launchEntryAnimationLondon').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [0]), true);
                });

                $('#launchExitAnimationLondon').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [1]), true);
                });
            };

            test_bench[5] = function() {
                $('#launchEntryAnimationShanghai').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [0]), true);
                });

                /*
                $('#cleanupAnimationShanghai').click(function () {
                    server.sendOrder(instanceId, order("cleanupAnimation", []), true);
                });

                $('#pauseAnimationShanghai').click(function () {
                    server.sendOrder(instanceId, order("pauseAnimation", []), true);
                });

                $('#startAnimationShanghai').click(function () {
                    server.sendOrder(instanceId, order("startAnimation", []), true);
                });

                $('#initAnimationShanghai').click(function () {
                    server.sendOrder(instanceId, order("initAnimation", []), true);
                });

                $('#createAnimationShanghai').click(function () {
                    server.sendOrder(instanceId, order("createAnimation", []), true);
                });
                //*/

                $('#launchExitAnimationShanghai').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [1]), true);
                });
            };

            test_bench[6] = test_bench[7] = test_bench[8] = test_bench[9] = function() {
                var cb = $('#outterCheckbox');
                var cb2 = $('#widthChangingCheckbox');
                var cb3 = $('#widthChangingLinkLoadCheckbox');

                $('#launchNormalAnimationShanghaiLines').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [0, cb.prop("checked"), cb2.prop("checked"), cb3.prop("checked")]), true);
                });

                $('#launchDisruptedAnimationShanghaiLines').click(function() {
                    server.sendOrder(instanceId, order("launchAnimation", [1, cb.prop("checked"), cb2.prop("checked"), cb3.prop("checked")]), true);
                });
            };

            //Parallel Coordinates Graph Control
            test_bench[10] = function(){
                /*var raw_dim, dimensions;
                dd3.getDataDimensions('speedDatingData', function(d){
                    raw_dim=d;
                    dimensions=[];
                    for(var key in dim){
                        if(key !== "length"){
                            dimensions.push(key);
                        }
                    }
                    $("#dimension_list").val(dimensions.join());
                });*/
                
                $("#dimension_list").click(function(e) { e.stopPropagation(); });

                $('#updim').click(function () {
                    var dimensions = $("#dimension_list").val().split(",");
                    console.log(dimensions);
                    server.sendOrder(instanceId, order("updateDimensions", [dimensions]), true);
                });

                $("#attr").click(function(e) { e.stopPropagation(); });
                $("#min").click(function(e) { e.stopPropagation(); });
                $("#max").click(function(e) { e.stopPropagation(); });

                $('#upfilter').click(function() {
                    var attrib = $("#attr").val();
                    var min= $("#min").val();
                    var max= $("#max").val();
                    server.sendOrder(instanceId, order("updateFilter", [attrib, min, max]), true);
                });

                $('#resetviz').click(function() {
                    server.sendOrder(instanceId, order("resetVisualization", []), true);
                });


            }
        });
    });
</script>
    @{
        var path = System.Web.HttpContext.Current.Server.MapPath("~/Web/Images/images/dd3/");
        var web_path = "\\Web\\Images\\images\\dd3\\";
        var filename = "";
        var extension = "";
        string database_path = System.Web.HttpContext.Current.Server.MapPath("~/Web/Images/Images/dd3/Database.txt");
        List<string> database = new List<string>();

        //Constructing database
        if (File.Exists(database_path))
        {
            database = File.ReadAllLines(database_path).ToList();
        }

        //Handles posted files if any
        if (IsPost && Request.Files.Count > 0)
        {
            HttpPostedFileBase file = Request.Files[0];
            if (file != null)
            {
                filename = Path.GetFileName(file.FileName);
                extension = Path.GetExtension(file.FileName);


                //foldername
                Directory.CreateDirectory(System.Web.HttpContext.Current.Server.MapPath("~/Web/Images/images/dd3"));
                if (extension == ".zip")
                {
                    file.SaveAs(path + filename);
                    using (ZipArchive archive = ZipFile.OpenRead(path + filename))
                    {
                        //Analysing zipfile content
                        foreach (ZipArchiveEntry entry in archive.Entries)
                        {
                            extension = Path.GetExtension(entry.FullName);
                            //This entry is an image
                            if (extension == ".png" || extension == ".jpeg" || extension == ".jpg" || extension == ".gif")
                            {
                                //Extract to hosted directory, overwrites
                                entry.ExtractToFile(path + entry.Name, true);
                                //Add to database.txt
                                database.Add(entry.Name);
                            }
                        }
                    }
                    //Do not keep the zip file
                    File.Delete(path + filename);
                }
                //Is an image
                else if (extension == ".png" || extension == ".jpeg" || extension == ".jpg" || extension == ".gif")
                {
                    //Put on disk
                    file.SaveAs(path + filename);
                    //Add to database.txt
                    database.Add(filename);
                }
                else //Is not an Image
                {
                    //Nothing
                }
            }
        }

        //Writes back database
        File.WriteAllLines(database_path, database);
    }

    <div id="wait" style="">
        Please wait while app is initializing...
    </div>

    <div id="error" style="display:none">
        <p style="color: rgb(237, 20, 51);font-size: 2.5em;">
            :(
        </p>
        <p style="color: rgb(237, 20, 51);font-size:2.5em;">
            Something went wrong, please <a href="javascript:parent.location.href=parent.location.href" style="color: rgb(237, 20, 51);">reload</a> the page<br>
            <span style="color:firebrick;font-size:0.7em;font-style:italic"> Error : the function 'initControl' was not initialized</span>
        </p>
    </div>

    <div id="control_0" style="display:none">
        <table class="table_control">
            <tr class="basic_moves">
                <td colspan="3">Basic moves</td>
            </tr>
            <tr class="basic_moves">
                <td rowspan="4" class="green" id="createRect">Create Rectangle</td>
                <td class="red" id="translationX">X Translation</td>
                <td rowspan="4" class="red" id="removeRect">Remove Rectangle</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="translationY">Y Translation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="rotation">Rotation</td>
            </tr>
            <tr class="basic_moves">
                <td class="red" id="allMoves">All</td>  
            </tr>
            <tr class="superposition">
                <td colspan="3">Superposition</td>
            </tr>
            <tr class="superposition non_distributed">
                <td rowspan="2" class="green" id="createCircles">Create Circles</td>
                <td class="red" id="moveCircles">Move <span id="spanc"></span> Circles</td>
                <td rowspan="2" class="red" id="removeCircles">Remove Circles</td>
            </tr>
            <tr class="superposition non_distributed">
                <td class="red" id="addCircles">Add Circles <input id="nbAddCircles" type="number" value="100" style="width:50px"/></td>
            </tr>
            <tr class="superposition distributed">
                <td rowspan="2" class="green" id="createDistributedCircles">Create distributed Circles</td>
                <td class="red" id="moveDistributedCircles">Move <span id="spandc"></span> distributed Circles</td>
                <td rowspan="2" class="red" id="removeDistributedCircles">Remove distributed Circles</td>
            </tr>
            <tr class="superposition distributed">
                <td class="red" id="addDistributedCircles">Add Distributed Circles <input id="nbAddDistributedCircles" type="number" value="10" style="width:50px" /></td>
            </tr>
            <tr class="group">
                <td colspan="3">Group transition</td>
            </tr>
            <tr class="group">
                <td rowspan="2" class="green" id="createPolygon">Create</td>
                <td class="red" id="movePolygon">Test 1</td>
                <td rowspan="2" class="red" id="removePolygon">Remove</td>
            </tr>
            <tr class="group">
                <td class="red">Test 2 (not implemented)</td>
            </tr>
            <tr class="fps">
                <td colspan="3">Framepersecond</td>
            </tr>
            <tr class="group">
                <td colspan="3" rowspan="1" class="green" id="fps_data"> Save FPS to CSV </td>
            </tr>
            <tr class="group">
                <td colspan="3" rowspan="1" class="green" id="event_data"> Save event to CSV </td>
            </tr>
        </table>
    </div>

    <div id="control_1" style="display:none">
        <table class="table_control">

        </table>
    </div>

    <div id="control_2" style="display: none">
    <table class="table_control">
        <tr>
            <td class="green" id="changeValues">Change Values</td>
        </tr>
        <tr>
            <td class="green">Transition Duration : <input id="timeTr" type="number" value="1000" style="width: 60px"/></td>
        </tr>
    </table>
    </div>
    <div id="control_3" style="display: none">

        <form id="submit_file_form" action="" method="post" enctype="multipart/form-data">
            <table class="table_control">
                <tr>
                    <td class="green" id="addRect">Add Rectangle</td>
                </tr>
                <tr>
                    <td class="green" id="addUrl">Add Image Url</td>
                    <td class="green" id="urlinputtd"><input id="inputUrl" type="url" /></td>
                </tr>
                <tr>

                    <td class="green" id="addFiles">Upload files (.zip, .png, jpg, .gif)</td>
                    <td class="green"><input id="fileInput" type="file" name="fileUpload"/></td>
                    <td class="green"><input id="submit_file" class="btn btn-primary btn-block" style="border-color: transparent;" type="submit" value="Submit"/></td>

                </tr>
                <tr>
                    <td class="green">Choose uploaded</td>
                    <td class="green">
                        <select class="input_field" id="fileSelect">
                            @foreach (var s in database)
                            { <option value="@web_path@s">@s</option>  }
                        </select>
                    </td>
                    <td class="green"><button id="fileSelectButton" type="button">Choose</button></td>
                    <td class="green"><button id="allFileSelectButton" type="button">All</button></td>
                </tr>
                <tr>
                    <td class="green" id="removeAllRect">Remove All</td>
                </tr>
                <tr>
                    <td class="green">Sensibility (ms) <input id="sens" type="number" value="100" style="width: 40px" /></td>
                </tr>
            </table>
        </form>
    </div>

    <div id="control_4" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="launchEntryAnimationLondon">Launch Animation of entries</td>
            </tr>
            <tr>
                <td class="green" id="launchExitAnimationLondon">Launch Animation of exit</td>
            </tr>
        </table>
    </div>

    <div id="control_5" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="launchEntryAnimationShanghai">Launch Animation of entries</td>
            </tr>
            <tr>
                <td class="green" id="launchExitAnimationShanghai">Launch Animation of exit</td>
            </tr>
            <!--
            <tr>
                <td class="green" id="createAnimationShanghai">Create</td>
            </tr>
            <tr>
                <td class="green" id="initAnimationShanghai">Init</td>
            </tr>
            <tr>
                <td class="green" id="startAnimationShanghai">Start</td>
            </tr>
            <tr>
                <td class="green" id="pauseAnimationShanghai">Pause</td>
            </tr>
            <tr>
                <td class="green" id="cleanupAnimationShanghai">Cleanup</td>
            </tr>
            <!---->
        </table>
    </div>
    
    <div id="control_6" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green"><INPUT type="checkbox" name="outter" id="outterCheckbox"> With outter lines (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green"><INPUT type="checkbox" name="widthChanging" id="widthChangingCheckbox" checked> Width changing (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green"><INPUT type="checkbox" name="widthChangingLinkLoad" id="widthChangingLinkLoadCheckbox"> Width represents link load (Choose before launching)</td>
            </tr>
            <tr>
                <td class="green" id="launchNormalAnimationShanghaiLines">Launch Animation with normal data</td>
            </tr>
            <tr>
                <td class="green" id="launchDisruptedAnimationShanghaiLines">Launch Animation with disrupted data</td>
            </tr>
        </table>
    </div>

    <div id="control_10" style="display:none">
        <table class="table_control">
            <tr>
                <td class="green" id="updim">Update Dimensions:  <input id="dimension_list" type="string" value="Gender,Id,Partner Id,Match,Partner Age,Partner Race,Partner's Preference of Attractiveness,Partner's Preference of Sincerity,Partner's Preference of Intelligence,Partner's Preference of Fun,Partner's Preference of Ambition,Partner's Preference of Shared Interest,Partner's decision" style="width:200px"/></td>
            </tr>
            <tr>
                <td class="green" id="resetviz">Reset Dimensions</td>
            </tr>
            <tr>
                <td class="green" id="upfilter">Update Filter: <input id="attr" type="string" value="Id" style="width:100px"/> Min: <input id="min" type="number" value="0" style="width:50px"/> Max: <input id="max" type="number" value="10" style="width:50px"/></td>
            </tr>
            
        </table>
    </div>

</body>
</html>
