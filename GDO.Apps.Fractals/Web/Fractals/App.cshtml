@{
    Layout = null;
}

<!DOCTYPE html>

<html style="overflow: hidden">
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
</head>
<body unselectable="on" class="unselectable">
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script>
        $(function () {          
            $(document).ready(function () {
                var gdo = parent.gdo;
                gdo.net.app["Fractals"].initClient();
            });
        });
    </script>

    <script type="text/javascript">
    var gl;
    var canvas;

    window.onload = init;

    function init() {

        // Set up canvas
        canvas = document.getElementById('glscreen');
        gl = canvas.getContext('experimental-webgl');
        canvas.width = 640;
        canvas.height = 480;

        // Initialise view port
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

        // Create a quad filling the screen
        buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array([
            -1.0, -1.0,
             1.0, -1.0,
            -1.0, 1.0,
            -1.0, 1.0,
             1.0, -1.0,
             1.0, 1.0]),
          gl.STATIC_DRAW
        );


        // Shader local variables
        var shaderScript;
        var shaderSource;
        var vertexShader;
        var fragmentShader;

        // Compile vertex shader
        shaderScript = document.getElementById("2d-vertex-shader");
        shaderSource = shaderScript.text;
        vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, shaderSource);
        gl.compileShader(vertexShader);

        // Compile fragment shader
        shaderScript = document.getElementById("2d-fragment-shader");
        shaderSource = shaderScript.text;
        fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, shaderSource);
        gl.compileShader(fragmentShader);

        // Create program with shaders
        program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        gl.useProgram(program);

        // Render the scene
        render();

    }

    function render() {

        // Ensure continuous rendering
        window.requestAnimationFrame(render, canvas);

        // Set position data of vertex shader
        positionLocation = gl.getAttribLocation(program, "a_position");
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

        // Draw quad
        gl.drawArrays(gl.TRIANGLES, 0, 6);

    }
    </script>

    <script id="2d-vertex-shader" type="x-shader/x-vertex">
        attribute vec2 a_position;

        void main() {
        gl_Position = vec4(a_position, 0, 1);
        }
    </script>

    <script id="2d-fragment-shader" type="x-shader/x-fragment">
        void main() {
        gl_FragColor = vec4(gl_FragCoord.x / 640.0, gl_FragCoord.y / 480.0, 0, 1);
        }
    </script>

    <canvas id="glscreen"></canvas>
    <div id="wrapper" style="background-color:#000;width:97vw;height:97vh;text-align:center; vertical-align: middle;" align="center">
        <div style="display: table; width:100%;height: 100%; overflow: hidden; text-align:center;">
            <div id="hello_text" style="display: table-cell; font-size: 35vh; color: azure; font-family: helvetica; text-align:center; vertical-align: middle;"></div>
        </div>
    </div>
</body>
</html>
