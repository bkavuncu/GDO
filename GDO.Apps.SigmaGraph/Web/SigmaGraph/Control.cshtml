@using System.IO
@using System.Web
@using GDO.Core
<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Bootstrap Core CSS -->
    <link href="../../Bootstrap/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- MetisMenu CSS -->
    <link href="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.css" rel="stylesheet">
    <!-- Timeline CSS -->
    <link href="../../Bootstrap/dist/css/timeline.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="../../Bootstrap/dist/css/sb-admin-2.css" rel="stylesheet">
    <!-- Morris Charts CSS -->
    <link href="../../Bootstrap/bower_components/morrisjs/morris.css" rel="stylesheet">
    <!-- Custom Fonts -->
    <link href="../../Bootstrap/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <style>
        body {
            color: #FFF;
        }

        .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -o-user-select: none;
            user-select: none;
        }

        .thumb {
            height: 75px;
            border: 1px solid #000;
            margin: 10px 5px 0 0;
        }

        .btn-file {
            position: relative;
            overflow: hidden;
        }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            cursor: inherit;
            display: block;
        }

        input[readonly] {
            background-color: #555 !important;
            cursor: text !important;
        }

        .file_upload input.upload {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }

        .input_field_div {
            margin: 0;
            padding: 0;
        }

        .input_field {
            width: 100%;
            height: 40px;
            border: 1px solid #333;
            background: #333;
            color: #FFF;
            padding: 0;
            display: inline-block;
            position: relative;
            text-align: center;
        }
        .color_field {
            width: 40px;
            height: 40px;
            background: transparent;
            padding: 0;
            border: 0;
            display: inline-block;
            position: relative;
            text-align: center;
        }
        table {
            background-color: transparent;
        }
    </style>
</head>
<body unselectable="on" class="unselectable">
    <script src="../../Scripts/jquery-2.1.4.min.js"></script>
    <script src="../../Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="../../Scripts/jquery.csv-0.71.min.js"></script>
    <script src="../../Bootstrap/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="../../Bootstrap/dist/js/sb-admin-2.js"></script>
    <script src="../../Bootstrap/bower_components/metisMenu/dist/metisMenu.min.js"></script>

<script>
    $(document).on('change', '.btn-file :file', function () {
        var input = $(this),
            numFiles = input.get(0).files ? input.get(0).files.length : 1,
            label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
        input.trigger('fileselect', [numFiles, label]);
    });

    $(document).ready(function () {
        $('.btn-file :file').on('fileselect', function (event, numFiles, label) {

            var input = $(this).parents('.input-group').find(':text'),
                log = numFiles > 1 ? numFiles + ' files selected' : label;

            if (input.length) {
                input.val(log);
            }
        });
    });

    $(window).ready(function () {
        const gdo = parent.gdo;

        // Setup canvas
        const canvas = document.getElementById("field_of_view");
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        const ctx = canvas.getContext('2d');
        gdo.canvas = canvas;

        // Setup object to plot
        gdo.imagesToPlot = new Map();

        // Handle movement type
        let type;
        canvas.addEventListener("touchstart", handleType, false);
        function handleType(ev) {
            if (ev.touches.length === 1) {
                type = 'pan';
            } else if (ev.touches.length === 2) {
                type = 'zoom';
            }
        }

        // Handle panning
        let lastPanPos;
        let totalPanXShift;
        let totalPanYShift;
        canvas.addEventListener("touchstart", handleStartPan, false);
        canvas.addEventListener("touchmove", handleMovePan, false);
        canvas.addEventListener("touchend", handleEndPan, false);

        function handleStartPan(ev) {
            if (type === 'pan') {
                console.log('start pan');
                lastPanPos = getMousePos(canvas, ev.touches[0]);
                totalPanXShift = 0;
                totalPanYShift = 0;
            }
        }

        function handleMovePan(ev) {
            if (type === 'pan') {
                console.log('move pan');

                const currentPanPos = getMousePos(canvas, ev.touches[0]);
                gdo.imagesToPlot.forEach(function(image) {
                    image.currentX += currentPanPos.x - lastPanPos.x;
                    image.currentY += currentPanPos.y - lastPanPos.y;
                });

                totalPanXShift += currentPanPos.x - lastPanPos.x;
                totalPanYShift += currentPanPos.y - lastPanPos.y;
                lastPanPos = currentPanPos;
            }
        }

        function handleEndPan(ev) {
            if (type === 'pan') {
                console.log("end pan");
                gdo.net.app["SigmaGraph"].server.pan(gdo.controlId, totalPanXShift / canvas.width, totalPanYShift / canvas.height);
                type = 'none';
            }
        }

        // Handle zooming
        let originalZoomCenter;
        let originalZoomDistance;
        let lastZoomRatio;
        canvas.addEventListener("touchstart", handleStartZoom, false);
        canvas.addEventListener("touchmove", handleMoveZoom, false);
        canvas.addEventListener("touchend", handleEndZoom, false);

        function handleStartZoom(ev) {
            if (type === 'zoom') {
                console.log('start zoom');
                const originalZoomPoints = [getMousePos(canvas, ev.touches[0]), getMousePos(canvas, ev.touches[1])];
                originalZoomCenter = midpoint(originalZoomPoints);
                originalZoomDistance = distance(originalZoomPoints);
                lastZoomRatio = 1;
            }
        }

        function handleMoveZoom(ev) {
            if (type === 'zoom') {
                console.log('move zoom');
                // Calculate the zoom ratio
                const zoomPoints = [getMousePos(canvas, ev.touches[0]), getMousePos(canvas, ev.touches[1])];
                const zoomPointsDistance = distance(zoomPoints);
                const zoomRatioRelativeToStart = zoomPointsDistance / originalZoomDistance;
                const zoomRatioRelativeToLastMove = zoomRatioRelativeToStart / lastZoomRatio;
                const ratio = zoomRatioRelativeToLastMove;
                // Calculate the new position of image UL and LR
                gdo.imagesToPlot.forEach(function(image) {
                    let currentXLowerRight = image.currentX + image.currentWidth;
                    let currentYLowerRight = image.currentY + image.currentHeight;
                    image.currentX = image.currentX * ratio + originalZoomCenter.x * (1 - ratio);
                    //image.currentY = image.currentY * ratio + originalZoomCenter.y * (1 - ratio);
                    currentXLowerRight = currentXLowerRight * ratio + originalZoomCenter.x * (1 - ratio);
                    //currentYLowerRight = currentYLowerRight * ratio + originalZoomCenter.y * (1 - ratio);
                    image.currentWidth = currentXLowerRight - image.currentX;
                    //image.currentHeight = currentYLowerRight - image.currentY;
                });

                // Update state
                lastZoomRatio = zoomRatioRelativeToStart;
            }
        }

        function handleEndZoom(ev) {
            if (type === 'zoom') {
                console.log('end zoom');
                gdo.net.app["SigmaGraph"].server.zoom(gdo.controlId,
                                                      originalZoomCenter.x / canvas.width,
                                                      originalZoomCenter.y / canvas.height,
                                                      lastZoomRatio);
                type = 'none';
            }
        }

        // Helper functions
        function getMousePos(canvasDom, touchEvent) {
            const rect = canvas.getBoundingClientRect();
            return {
                x: touchEvent.clientX - rect.left,
                y: touchEvent.clientY - rect.top
            };
        }

        function midpoint(points) {
            return {
                x: (points[0].x + points[1].x) / 2, 
                y: (points[0].y + points[1].y) / 2
            };
        }

        function distance(points) {
            return Math.sqrt((points[0].x - points[1].x) ** 2 +
                             (points[0].y - points[1].y) ** 2);
        }

        function plotImages() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            gdo.imagesToPlot.forEach(function (canvasImage) {
                ctx.drawImage(canvasImage.image, canvasImage.currentX, canvasImage.currentY, canvasImage.currentWidth, canvasImage.currentHeight);
            });
        }

        (function animloop(){
            requestAnimationFrame(animloop);
            plotImages();
        })();
    });

    $(function () {

        var gdo = parent.gdo;
        gdo.saveAs = parent.saveAs;

        document.getElementById("evalSubmit").onclick = function () {
            const code = document.getElementById('eval').value;
            console.log("Telling the server to eval the following code: ")
            console.log(code);
            gdo.net.app["SigmaGraph"].server.evaluate(gdo.controlId, code);
        }

        document.getElementById("showGraph").onclick = function () {
            gdo.net.app["SigmaGraph"].server.showControlGraph(gdo.controlId);
        }

        document.getElementById("saveGraph").onclick = function () {
            let maxRow = 0;
            let maxCol = 0;
            gdo.imagesToPlot.forEach(function (val, key) {
                const row = key.split(/R|C/)[1];
                const col = key.split(/R|C/)[2];
                maxRow = Math.max(row, maxRow);
                maxCol = Math.max(col, maxCol);
            });
            const height = gdo.imagesToPlot.get("R0C0").image.height;
            const width = gdo.imagesToPlot.get("R0C0").image.width;

            const newCanvas = document.createElement('canvas');
            newCanvas.height = height * (maxRow + 1);
            newCanvas.width = width * (maxCol + 1);
            const newContext = newCanvas.getContext('2d');

            newContext.fillStyle = 'white';
            newContext.fillRect(0, 0, newCanvas.width, newCanvas.height);
            gdo.imagesToPlot.forEach(function (val, key) {
                const row = key.split(/R|C/)[1];
                const col = key.split(/R|C/)[2];
                newContext.drawImage(val.image, col * width, row * height);
            });

            newCanvas.toBlob(function (blob) {
                gdo.saveAs(blob, "screenshot.png");
            }, "image/png");
        }

        $("#image_digit_button").click(function () {
            var gdo = parent.gdo;
            gdo.net.app["SigmaGraph"].server.initiateProcessing(gdo.controlId, $("#graph_digit").val());
        });

        $("#graph_digit").keypress(function (e) {
            if (e.keyCode == 13) {
                $("#image_digit_button").click();
            }
        });

        $("#toggle_nodeSize").click(function () {
            if ($(this).hasClass("FLAG_ON")) {
                gdo.net.app["SigmaGraph"].server.setAllNodesSize(gdo.controlId, parseInt($("#allNodeSize").val()));
                $(this).removeClass("FLAG_ON").addClass("FLAG_OFF");
                $(this).html("<i class='fa  fa-circle  fa-fw'></i>&nbsp;Original size");
            } else {
                gdo.net.app["SigmaGraph"].server.setOriginalSize(gdo.controlId);
                $(this).removeClass("FLAG_OFF").addClass("FLAG_ON");
                $(this).html("<i class='fa  fa-circle  fa-fw'></i>&nbsp;Same size");
            }
        });

        $("#toggle_links").click(function () {
            if ($(this).hasClass("FLAG_ON")) {
                gdo.net.app["SigmaGraph"].server.hideLinks(gdo.controlId);
                $(this).removeClass("FLAG_ON").addClass("FLAG_OFF");
                $(this).html("<i class='fa  fa-link  fa-fw'></i>&nbsp;Show Links");
            } else {
                gdo.net.app["SigmaGraph"].server.showLinks(gdo.controlId);
                $(this).removeClass("FLAG_OFF").addClass("FLAG_ON");
                $(this).html("<i class='fa  fa-link  fa-fw'></i>&nbsp;Hide Links");
            }
        });

        $("#toggle_labels").click(function () {
            if ($(this).hasClass("FLAG_ON")) {
                gdo.net.app["SigmaGraph"].server.hideLabels(gdo.controlId);
                $(this).removeClass("FLAG_ON").addClass("FLAG_OFF");
                $(this).html("<i class='fa  fa-tag  fa-fw'></i>&nbsp;Show");
                $(this).parent().siblings().show();
            } else {
                gdo.net.app["SigmaGraph"].server.showLabels(gdo.controlId, $("#select_label").val(), $("#color_Labels").val());
                $(this).removeClass("FLAG_OFF").addClass("FLAG_ON");
                $(this).html("<i class='fa  fa-tag  fa-fw'></i>&nbsp;Hide Labels");
                $(this).parent().siblings().hide();
            }
        });

        // trigger panning
        $("#up").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerPanning(gdo.controlId, "up");
        });


        $("#left").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerPanning(gdo.controlId, "left");
        });


        $("#down").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerPanning(gdo.controlId, "down");
        });

        $("#right").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerPanning(gdo.controlId, "right");
        });

        /* //TODO Panning using key is disabled for now
        // because it's being triggered unnecessarily sometimes when typing

        window.addEventListener('keydown', processKeyPress, true);

        function processKeyPress(evt) {
            var key = evt.keyCode;
            var direction = null;

            if (key == 37) {    // default code for arrow keys
                direction = "left";
            } else if (key == 38) {
                direction = "up";
            } else if (key == 39) {
                direction = "right";
            } else if (key == 40) {
                direction = "down";
            }

            if (direction != null) {
                gdo.net.app["Graph"].server.triggerPanning(gdo.controlId, direction);
            }
        }

        */

        $("#zoomIn").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerZoomIn(gdo.controlId);
        });

        $("#zoomOut").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerZoomOut(gdo.controlId);
        });

        $("#blue").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerRGB(gdo.controlId, "blue");
        });

        $("#green").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerRGB(gdo.controlId, "green");
        });

        $("#orange").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerRGB(gdo.controlId, "orange");
        });

        $("#red").click(function () {
            gdo.net.app["SigmaGraph"].server.triggerRGB(gdo.controlId, "red");
        });


        $("#show_mostConnectedNodes").click(function () {
            gdo.consoleOut('.SIGMAGRAPHRENDERER', 1, 'Instance ' + gdo.controlId + ": Rendering most connected nodes.");
            gdo.net.app["SigmaGraph"].server.renderMostConnectedNodes(gdo.controlId, parseInt($("#numLinks").val()), $("#color_mostConnectedNodes").val());
        });

        $("#toggle_mostConnectedLabels").click(function () {
            gdo.consoleOut('.SIGMAGRAPHRENDERER', 1, 'Instance ' + gdo.controlId + ": Rendering labels of most connected nodes.");
            gdo.net.app["SigmaGraph"].server.renderMostConnectedLabels(gdo.controlId, parseInt($("#numLinks").val()), $("#select_mostConnectedLabels").val(), $("#color_mostConnectedLabels").val());
        });

        $("#hide_mostConnected").click(function () {
            gdo.net.app["SigmaGraph"].server.hideMostConnected(gdo.controlId);
        });


        // Search event listeners

        $("#startSearch").click(function () {
            gdo.consoleOut('.GRAPHRENDERER', 1, 'Instance ' + gdo.controlId + ": Start searching for label -- " + $("#searchKeywords").val());
            gdo.net.app["SigmaGraph"].server.initiateSearch(gdo.controlId, $("#searchKeywords").val(), $("#select_SearchFields").val());
        });

        $("#toggle_searchLabels").click(function () {
            gdo.consoleOut('.SIGMAGRAPHRENDERER', 1, 'Instance ' + gdo.controlId + ": Rendering labels of selected nodes.");
            gdo.net.app["SigmaGraph"].server.renderSearchLabels(gdo.controlId, $("#select_SearchLabels").val());
        });

        $("#hide_sublinks").click(function () {
            gdo.net.app["SigmaGraph"].server.hideSublinks(gdo.controlId);
        });

        $("#hide_search").click(function () {
            gdo.net.app["SigmaGraph"].server.hideSearch(gdo.controlId);
        });


        gdo.net.app["SigmaGraph"].initControl();
    });
</script>

    <div class="wrapper" style="width: 97%">
        @{
            var path = "";
            var filename = "";
            if (IsPost)
            {

                HttpPostedFileBase file = Request.Files[0];
                if (file != null && !file.FileName.IsEmpty())   //need to add this check, because it tried to save empty file in subsequent button clicks
                {
                    filename = Path.GetFileName(file.FileName);
                    //foldername
                    Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Web/SigmaGraph/graphmls"));
                    path = HttpContext.Current.Server.MapPath("~/Web/SigmaGraph/graphmls/") + filename;
                    if (File.Exists(path)) {  // if the file already exists, delete it
                        File.Delete(path);
                    }
                    file.SaveAs(path);
                    }
                }
        }
        <div>
            <div class="row">
                <div class="col-lg-4">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h6><i class='fa  fa-upload fa-fw'></i>&nbsp;Upload Graph</h6>
                        </div>
                        <div class="panel-body">
                            <fieldset>
                                <form id="submit_graph_form" action="" method="post" enctype="multipart/form-data">
                                    <table style="border-collapse: separate; border-spacing: 3px; background-color: transparent;">
                                        <tr>
                                            <td>
                                                <div style="background-color: transparent">
                                                    <span class="btn btn-primary btn-file btn-block" style="border-color: transparent;"><i class='fa  fa-file-picture-o fa-fw'></i>&nbsp;Choose File <input type="file" name="Graph" class="upload" id="select_graph"></span>
                                                </div>
                                            </td>
                                            <td>
                                                <input id="submit_graph" class="btn btn-primary btn-block" style="border-color: transparent;" type="submit" value="&nbsp;Render Graph"/>
                                            </td>
                                        </tr>
                                    </table>
                                </form>
                            </fieldset>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h6><i class='fa  fa-question-circle fa-fw'></i>&nbsp;Find Processed Graph</h6>
                        </div>
                        <div class="panel-body">
                            <fieldset>
                                <table style="border-collapse: separate; border-spacing: 3px;background-color:transparent;">
                                    <tr>
                                        <td>
                                            <div style="background-color:transparent"><h6>Previous Graph:</h6></div>
                                        </td>
                                        <td>
                                            <div class="input_field_div">
                                                <select class="input_field" id="graph_digit">
                                                    @{
                                                        string graphfolder = System.Web.HttpContext.Current.Server.MapPath("~/Web/SigmaGraph/graphmls");
                                                        string[] files = Directory.GetFiles(graphfolder);
                                                    }
                                                    @foreach (var s in files)
                                                    {  <option value="@s.Split('\\').Last()">@s.Split('\\').Last()</option>  }
                                                </select>
                                            </div>
                                        </td>
                                        <td>
                                            <button type='button' id="image_digit_button" class='btn btn-primary btn-block'><i class='fa  fa-check fa-fw'></i>&nbsp;Submit</button>
                                        </td>
                                    </tr>
                                </table>
                            </fieldset>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            <h6><i class='fa  fa-info-circle fa-fw'></i>&nbsp;Messages</h6>
                        </div>
                        <div class="panel-body">
                            <h6 id="message_from_server">&nbsp;</h6>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h6><i class='fa  fa-sliders  fa-fw'></i>&nbsp;Control</h6>
                        </div>
                        <div class="panel-body">
                            <fieldset id="graph_UI">
                                @* Cool Stuff
                                    <input size="2" class="input_field" type="text" id="allNodeSize" value="3">
                                    <input type="color" id="color_mostConnectedLabels" value="#ff0000" class="color_field">
                                *@
                                <textarea rows="10" cols="207" style="color:black" id="eval"></textarea><br>
                                <input type="submit" style="color:black" id="evalSubmit"><br>
                                <button type="button" id="showGraph" style="color:black">Show Graph (May take a while...)</button>
                                <button type="button" id="saveGraph" style="color:black">Save Graph</button>
                                <canvas id="field_of_view" style="width: 1400px; height: 420px; touch-action: none; background: white"></canvas>
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (path != "")
    {
        <script>
            $(function () {
                $(document).ready(function () {
                    var gdo = parent.gdo;
                    gdo.consoleOut('.SIGMAGRAPHRENDERER', 1, 'Instance ' + gdo.controlId + ": Uploaded Graph " + "@filename");
                    gdo.net.app["SigmaGraph"].server.initiateProcessing(gdo.controlId, "@filename");
                });
            });
        </script>
    }
</body>
</html>
